{"id":"cd537772758f2e12e77efb8985085560","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? efficientKeccak256(a, b) : efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function efficientKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"contracts/MerkleDrawManager/MerkleDrawManager.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\r\n\r\ncontract MerkleDrawManager {\r\n    struct Draw {\r\n        bytes32 merkleRoot;\r\n        uint256 drawBlockNumber;\r\n        bytes32 seed;\r\n        bool seedGenerated;\r\n    }\r\n\r\n    mapping(uint256 => Draw) public draws;\r\n\r\n    event DrawCreated(uint256 indexed drawId, bytes32 merkleRoot, uint256 drawBlockNumber);\r\n    event SeedGenerated(uint256 indexed drawId, bytes32 seed);\r\n\r\n    /// @notice Create a new draw with its Merkle root and future block number\r\n    function createDraw(uint256 drawId, bytes32 merkleRoot, uint256 drawBlockNumber) external {\r\n        require(draws[drawId].merkleRoot == 0, \"Draw already exists\");\r\n        require(drawBlockNumber > block.number, \"Draw block must be in the future\");\r\n\r\n        draws[drawId] = Draw({\r\n            merkleRoot: merkleRoot,\r\n            drawBlockNumber: drawBlockNumber,\r\n            seed: 0,\r\n            seedGenerated: false\r\n        });\r\n\r\n        emit DrawCreated(drawId, merkleRoot, drawBlockNumber);\r\n    }\r\n\r\n    /// @notice Generate the seed from the predefined blockhash\r\n    function generateSeed(uint256 drawId) external {\r\n        Draw storage draw = draws[drawId];\r\n        require(draw.merkleRoot != 0, \"Draw does not exist\");\r\n        require(!draw.seedGenerated, \"Seed already generated\");\r\n        require(block.number > draw.drawBlockNumber, \"Draw block not reached\");\r\n\r\n        bytes32 bh = blockhash(draw.drawBlockNumber);\r\n        require(bh != 0, \"Blockhash not available\");\r\n\r\n        draw.seed = keccak256(abi.encodePacked(bh, drawId));\r\n        draw.seedGenerated = true;\r\n\r\n        emit SeedGenerated(drawId, draw.seed);\r\n    }\r\n\r\n    /// @notice Get the winning index\r\n    function getWinnerIndex(uint256 drawId, uint256 totalParticipants) public view returns (uint256) {\r\n        Draw storage draw = draws[drawId];\r\n        require(draw.seedGenerated, \"Seed not generated yet\");\r\n        require(totalParticipants > 0, \"No participants\");\r\n\r\n        return uint256(draw.seed) % totalParticipants;\r\n    }\r\n\r\n    /// @notice Verify if an address is the winner using its index and Merkle proof\r\n    function verifyWinner(\r\n        uint256 drawId,\r\n        uint256 totalParticipants,\r\n        uint256 leafIndex,\r\n        address user,\r\n        bytes32[] calldata proof\r\n    ) external view returns (bool) {\r\n        Draw storage draw = draws[drawId];\r\n        require(draw.seedGenerated, \"Seed not generated\");\r\n\r\n        // Recompute the leaf\r\n        bytes32 leaf = keccak256(abi.encodePacked(leafIndex, user));\r\n\r\n        // Verify Merkle proof\r\n        bool validProof = MerkleProof.verifyCalldata(proof, draw.merkleRoot, leaf);\r\n        if (!validProof) return false;\r\n\r\n        // Check if leafIndex is the winner\r\n        uint256 winnerIndex = uint256(draw.seed) % totalParticipants;\r\n        return (leafIndex == winnerIndex);\r\n    }\r\n}\r\n"}},"settings":{"evmVersion":"paris","optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[39]},"id":40,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:0"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"139:81:0","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":39,"linearizedBaseContracts":[39],"name":"Hashes","nameLocation":"229:6:0","nodeType":"ContractDefinition","nodes":[{"body":{"id":25,"nodeType":"Block","src":"588:83:0","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":14,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":12,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"605:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":13,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"609:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":20,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"659:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":21,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"662:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":19,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"640:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":22,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:59:0","trueExpression":{"arguments":[{"id":16,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5,"src":"632:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":17,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"635:1:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":15,"name":"efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"613:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":18,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:24:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":11,"id":24,"nodeType":"Return","src":"598:66:0"}]},"documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"242:257:0","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":26,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:0","nodeType":"FunctionDefinition","parameters":{"id":8,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5,"mutability":"mutable","name":"a","nameLocation":"542:1:0","nodeType":"VariableDeclaration","scope":26,"src":"534:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"b","nameLocation":"553:1:0","nodeType":"VariableDeclaration","scope":26,"src":"545:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:0"},"returnParameters":{"id":11,"nodeType":"ParameterList","parameters":[{"constant":false,"id":10,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":26,"src":"579:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":9,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:0"},"scope":39,"src":"504:167:0","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":37,"nodeType":"Block","src":"879:151:0","statements":[{"AST":{"nodeType":"YulBlock","src":"914:110:0","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"935:4:0","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"941:1:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:0"},"nodeType":"YulFunctionCall","src":"928:15:0"},"nodeType":"YulExpressionStatement","src":"928:15:0"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"963:4:0","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"969:1:0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"956:6:0"},"nodeType":"YulFunctionCall","src":"956:15:0"},"nodeType":"YulExpressionStatement","src":"956:15:0"},{"nodeType":"YulAssignment","src":"984:30:0","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1003:4:0","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"1009:4:0","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"993:9:0"},"nodeType":"YulFunctionCall","src":"993:21:0"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"984:5:0"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":29,"isOffset":false,"isSlot":false,"src":"941:1:0","valueSize":1},{"declaration":31,"isOffset":false,"isSlot":false,"src":"969:1:0","valueSize":1},{"declaration":34,"isOffset":false,"isSlot":false,"src":"984:5:0","valueSize":1}],"flags":["memory-safe"],"id":36,"nodeType":"InlineAssembly","src":"889:135:0"}]},"documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"677:109:0","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":38,"implemented":true,"kind":"function","modifiers":[],"name":"efficientKeccak256","nameLocation":"800:18:0","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"a","nameLocation":"827:1:0","nodeType":"VariableDeclaration","scope":38,"src":"819:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":28,"name":"bytes32","nodeType":"ElementaryTypeName","src":"819:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":31,"mutability":"mutable","name":"b","nameLocation":"838:1:0","nodeType":"VariableDeclaration","scope":38,"src":"830:9:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":30,"name":"bytes32","nodeType":"ElementaryTypeName","src":"830:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"818:22:0"},"returnParameters":{"id":35,"nodeType":"ParameterList","parameters":[{"constant":false,"id":34,"mutability":"mutable","name":"value","nameLocation":"872:5:0","nodeType":"VariableDeclaration","scope":38,"src":"864:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":33,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"863:15:0"},"scope":39,"src":"791:239:0","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":40,"src":"221:811:0","usedErrors":[],"usedEvents":[]}],"src":"113:920:0"},"id":0},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[39],"MerkleProof":[1112]},"id":1113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":41,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:1"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":43,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1113,"sourceUnit":40,"src":"232:36:1","symbolAliases":[{"foreign":{"id":42,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"240:6:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":44,"nodeType":"StructuredDocumentation","src":"270:1082:1","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":1112,"linearizedBaseContracts":[1112],"name":"MerkleProof","nameLocation":"1361:11:1","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":45,"nodeType":"StructuredDocumentation","src":"1379:60:1","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":47,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:1","nodeType":"ErrorDefinition","parameters":{"id":46,"nodeType":"ParameterList","parameters":[],"src":"1478:2:1"},"src":"1444:37:1"},{"body":{"id":67,"nodeType":"Block","src":"1999:57:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":61,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":51,"src":"2029:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":62,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"2036:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":60,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[109,191],"referencedDeclaration":109,"src":"2016:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":63,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":64,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":53,"src":"2045:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":59,"id":66,"nodeType":"Return","src":"2009:40:1"}]},"documentation":{"id":48,"nodeType":"StructuredDocumentation","src":"1487:410:1","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:1","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[{"constant":false,"id":51,"mutability":"mutable","name":"proof","nameLocation":"1935:5:1","nodeType":"VariableDeclaration","scope":68,"src":"1918:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":49,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":50,"nodeType":"ArrayTypeName","src":"1918:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":53,"mutability":"mutable","name":"root","nameLocation":"1950:4:1","nodeType":"VariableDeclaration","scope":68,"src":"1942:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":52,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":55,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:1","nodeType":"VariableDeclaration","scope":68,"src":"1956:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":54,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:1"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[{"constant":false,"id":58,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":68,"src":"1993:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":57,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:1"},"scope":1112,"src":"1902:154:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":108,"nodeType":"Block","src":"2549:216:1","statements":[{"assignments":[80],"declarations":[{"constant":false,"id":80,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:1","nodeType":"VariableDeclaration","scope":108,"src":"2559:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":79,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":82,"initialValue":{"id":81,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":74,"src":"2582:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:1"},{"body":{"id":104,"nodeType":"Block","src":"2639:91:1","statements":[{"expression":{"id":102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":94,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2653:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":97,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2696:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":98,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"2710:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":100,"indexExpression":{"id":99,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"2716:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":95,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"2668:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$39_$","typeString":"type(library Hashes)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:1","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":26,"src":"2668:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":103,"nodeType":"ExpressionStatement","src":"2653:66:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":87,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"2616:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":88,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"2620:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:1","memberName":"length","nodeType":"MemberAccess","src":"2620:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":105,"initializationExpression":{"assignments":[84],"declarations":[{"constant":false,"id":84,"mutability":"mutable","name":"i","nameLocation":"2609:1:1","nodeType":"VariableDeclaration","scope":105,"src":"2601:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":83,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":86,"initialValue":{"hexValue":"30","id":85,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:1"},"loopExpression":{"expression":{"id":92,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:1","subExpression":{"id":91,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"2634:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":93,"nodeType":"ExpressionStatement","src":"2634:3:1"},"nodeType":"ForStatement","src":"2596:134:1"},{"expression":{"id":106,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"2746:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":78,"id":107,"nodeType":"Return","src":"2739:19:1"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"2062:390:1","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":109,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:1","nodeType":"FunctionDefinition","parameters":{"id":75,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"mutability":"mutable","name":"proof","nameLocation":"2496:5:1","nodeType":"VariableDeclaration","scope":109,"src":"2479:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":70,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":71,"nodeType":"ArrayTypeName","src":"2479:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":74,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:1","nodeType":"VariableDeclaration","scope":109,"src":"2503:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":73,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:1"},"returnParameters":{"id":78,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":109,"src":"2540:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:1"},"scope":1112,"src":"2457:308:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":140,"nodeType":"Block","src":"3376:65:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":133,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"3406:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":134,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":117,"src":"3413:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":135,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":127,"src":"3419:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":132,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[109,191],"referencedDeclaration":191,"src":"3393:12:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":137,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3430:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":131,"id":139,"nodeType":"Return","src":"3386:48:1"}]},"documentation":{"id":110,"nodeType":"StructuredDocumentation","src":"2771:407:1","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":141,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:1","nodeType":"FunctionDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"proof","nameLocation":"3225:5:1","nodeType":"VariableDeclaration","scope":141,"src":"3208:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":111,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":112,"nodeType":"ArrayTypeName","src":"3208:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"root","nameLocation":"3248:4:1","nodeType":"VariableDeclaration","scope":141,"src":"3240:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":114,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":117,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:1","nodeType":"VariableDeclaration","scope":141,"src":"3262:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:1","nodeType":"VariableDeclaration","scope":141,"src":"3284:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":126,"nodeType":"FunctionTypeName","parameterTypes":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":119,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":126,"src":"3293:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":118,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":121,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":126,"src":"3302:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:1"},"returnParameterTypes":{"id":125,"nodeType":"ParameterList","parameters":[{"constant":false,"id":124,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":126,"src":"3325:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:1"},"src":"3284:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:1"},"returnParameters":{"id":131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":141,"src":"3370:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":129,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:1"},"scope":1112,"src":"3183:258:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":190,"nodeType":"Block","src":"4019:195:1","statements":[{"assignments":[163],"declarations":[{"constant":false,"id":163,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:1","nodeType":"VariableDeclaration","scope":190,"src":"4029:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":162,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":165,"initialValue":{"id":164,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"4052:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:1"},{"body":{"id":186,"nodeType":"Block","src":"4109:70:1","statements":[{"expression":{"id":184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":177,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4123:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":179,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4145:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":180,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"4159:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":182,"indexExpression":{"id":181,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"4165:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":178,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":157,"src":"4138:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":185,"nodeType":"ExpressionStatement","src":"4123:45:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":170,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"4086:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":171,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"4090:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:1","memberName":"length","nodeType":"MemberAccess","src":"4090:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":187,"initializationExpression":{"assignments":[167],"declarations":[{"constant":false,"id":167,"mutability":"mutable","name":"i","nameLocation":"4079:1:1","nodeType":"VariableDeclaration","scope":187,"src":"4071:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":166,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":169,"initialValue":{"hexValue":"30","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:1"},"loopExpression":{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:1","subExpression":{"id":174,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":167,"src":"4104:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":176,"nodeType":"ExpressionStatement","src":"4104:3:1"},"nodeType":"ForStatement","src":"4066:113:1"},{"expression":{"id":188,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"4195:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":161,"id":189,"nodeType":"Return","src":"4188:19:1"}]},"documentation":{"id":142,"nodeType":"StructuredDocumentation","src":"3447:387:1","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":191,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:1","nodeType":"FunctionDefinition","parameters":{"id":158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"proof","nameLocation":"3887:5:1","nodeType":"VariableDeclaration","scope":191,"src":"3870:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":143,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":144,"nodeType":"ArrayTypeName","src":"3870:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":147,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:1","nodeType":"VariableDeclaration","scope":191,"src":"3902:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":157,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:1","nodeType":"VariableDeclaration","scope":191,"src":"3924:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":156,"nodeType":"FunctionTypeName","parameterTypes":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":156,"src":"3933:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":156,"src":"3942:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:1"},"returnParameterTypes":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":154,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":156,"src":"3965:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:1"},"src":"3924:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:1"},"returnParameters":{"id":161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":191,"src":"4010:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:1"},"scope":1112,"src":"3839:375:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":211,"nodeType":"Block","src":"4744:65:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":205,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":195,"src":"4782:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":206,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"4789:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":204,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[253,335],"referencedDeclaration":253,"src":"4761:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":208,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"4798:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":203,"id":210,"nodeType":"Return","src":"4754:48:1"}]},"documentation":{"id":192,"nodeType":"StructuredDocumentation","src":"4220:412:1","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":212,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:1","nodeType":"FunctionDefinition","parameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":195,"mutability":"mutable","name":"proof","nameLocation":"4680:5:1","nodeType":"VariableDeclaration","scope":212,"src":"4661:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":193,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":194,"nodeType":"ArrayTypeName","src":"4661:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":197,"mutability":"mutable","name":"root","nameLocation":"4695:4:1","nodeType":"VariableDeclaration","scope":212,"src":"4687:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:1","nodeType":"VariableDeclaration","scope":212,"src":"4701:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":198,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:1"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":212,"src":"4738:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":201,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:1"},"scope":1112,"src":"4637:172:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":252,"nodeType":"Block","src":"5314:216:1","statements":[{"assignments":[224],"declarations":[{"constant":false,"id":224,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:1","nodeType":"VariableDeclaration","scope":252,"src":"5324:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":226,"initialValue":{"id":225,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":218,"src":"5347:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:1"},{"body":{"id":248,"nodeType":"Block","src":"5404:91:1","statements":[{"expression":{"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":238,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5418:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":241,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5461:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":242,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"5475:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":244,"indexExpression":{"id":243,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"5481:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":239,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"5433:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$39_$","typeString":"type(library Hashes)"}},"id":240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:1","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":26,"src":"5433:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":247,"nodeType":"ExpressionStatement","src":"5418:66:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":231,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"5381:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":232,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"5385:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:1","memberName":"length","nodeType":"MemberAccess","src":"5385:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":249,"initializationExpression":{"assignments":[228],"declarations":[{"constant":false,"id":228,"mutability":"mutable","name":"i","nameLocation":"5374:1:1","nodeType":"VariableDeclaration","scope":249,"src":"5366:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":227,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":230,"initialValue":{"hexValue":"30","id":229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:1"},"loopExpression":{"expression":{"id":236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:1","subExpression":{"id":235,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"5399:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":237,"nodeType":"ExpressionStatement","src":"5399:3:1"},"nodeType":"ForStatement","src":"5361:134:1"},{"expression":{"id":250,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"5511:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":222,"id":251,"nodeType":"Return","src":"5504:19:1"}]},"documentation":{"id":213,"nodeType":"StructuredDocumentation","src":"4815:392:1","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":253,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:1","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"proof","nameLocation":"5261:5:1","nodeType":"VariableDeclaration","scope":253,"src":"5242:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":214,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":215,"nodeType":"ArrayTypeName","src":"5242:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":218,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:1","nodeType":"VariableDeclaration","scope":253,"src":"5268:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:1"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":253,"src":"5305:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":220,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:1"},"scope":1112,"src":"5212:318:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":284,"nodeType":"Block","src":"6153:73:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":277,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"6191:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":278,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":261,"src":"6198:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":279,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"6204:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":276,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[253,335],"referencedDeclaration":335,"src":"6170:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":281,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"6215:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":275,"id":283,"nodeType":"Return","src":"6163:56:1"}]},"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"5536:409:1","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":285,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:1","nodeType":"FunctionDefinition","parameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"proof","nameLocation":"6002:5:1","nodeType":"VariableDeclaration","scope":285,"src":"5983:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":255,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":256,"nodeType":"ArrayTypeName","src":"5983:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":259,"mutability":"mutable","name":"root","nameLocation":"6025:4:1","nodeType":"VariableDeclaration","scope":285,"src":"6017:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":258,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":261,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:1","nodeType":"VariableDeclaration","scope":285,"src":"6039:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":271,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:1","nodeType":"VariableDeclaration","scope":285,"src":"6061:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":270,"nodeType":"FunctionTypeName","parameterTypes":{"id":266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":270,"src":"6070:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":262,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":265,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":270,"src":"6079:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:1"},"returnParameterTypes":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":268,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":270,"src":"6102:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":267,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:1"},"src":"6061:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:1"},"returnParameters":{"id":275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":285,"src":"6147:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":273,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:1"},"scope":1112,"src":"5950:276:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":334,"nodeType":"Block","src":"6816:195:1","statements":[{"assignments":[307],"declarations":[{"constant":false,"id":307,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:1","nodeType":"VariableDeclaration","scope":334,"src":"6826:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":306,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":309,"initialValue":{"id":308,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":291,"src":"6849:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:1"},{"body":{"id":330,"nodeType":"Block","src":"6906:70:1","statements":[{"expression":{"id":328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":321,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"6920:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":323,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"6942:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":324,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"6956:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":326,"indexExpression":{"id":325,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"6962:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":322,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":301,"src":"6935:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":329,"nodeType":"ExpressionStatement","src":"6920:45:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":314,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"6883:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":315,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"6887:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:1","memberName":"length","nodeType":"MemberAccess","src":"6887:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":331,"initializationExpression":{"assignments":[311],"declarations":[{"constant":false,"id":311,"mutability":"mutable","name":"i","nameLocation":"6876:1:1","nodeType":"VariableDeclaration","scope":331,"src":"6868:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":310,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":313,"initialValue":{"hexValue":"30","id":312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:1"},"loopExpression":{"expression":{"id":319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:1","subExpression":{"id":318,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":311,"src":"6901:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":320,"nodeType":"ExpressionStatement","src":"6901:3:1"},"nodeType":"ForStatement","src":"6863:113:1"},{"expression":{"id":332,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"6992:12:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":305,"id":333,"nodeType":"Return","src":"6985:19:1"}]},"documentation":{"id":286,"nodeType":"StructuredDocumentation","src":"6232:389:1","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":335,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:1","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":289,"mutability":"mutable","name":"proof","nameLocation":"6684:5:1","nodeType":"VariableDeclaration","scope":335,"src":"6665:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":288,"nodeType":"ArrayTypeName","src":"6665:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":291,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:1","nodeType":"VariableDeclaration","scope":335,"src":"6699:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":290,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":301,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:1","nodeType":"VariableDeclaration","scope":335,"src":"6721:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":300,"nodeType":"FunctionTypeName","parameterTypes":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":293,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":300,"src":"6730:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":295,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":300,"src":"6739:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":294,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:1"},"returnParameterTypes":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":300,"src":"6762:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:1"},"src":"6721:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:1"},"returnParameters":{"id":305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":304,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":335,"src":"6807:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:1"},"scope":1112,"src":"6626:385:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":360,"nodeType":"Block","src":"7797:76:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":353,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":339,"src":"7832:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":354,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"7839:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":355,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"7851:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":352,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[519,723],"referencedDeclaration":519,"src":"7814:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":357,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"7862:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":351,"id":359,"nodeType":"Return","src":"7807:59:1"}]},"documentation":{"id":336,"nodeType":"StructuredDocumentation","src":"7017:593:1","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":361,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:1","nodeType":"FunctionDefinition","parameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"proof","nameLocation":"7667:5:1","nodeType":"VariableDeclaration","scope":361,"src":"7650:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":337,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":338,"nodeType":"ArrayTypeName","src":"7650:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":342,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:1","nodeType":"VariableDeclaration","scope":361,"src":"7682:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":340,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":341,"nodeType":"ArrayTypeName","src":"7682:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":344,"mutability":"mutable","name":"root","nameLocation":"7724:4:1","nodeType":"VariableDeclaration","scope":361,"src":"7716:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:1","nodeType":"VariableDeclaration","scope":361,"src":"7738:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":346,"nodeType":"ArrayTypeName","src":"7738:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:1"},"returnParameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":350,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":361,"src":"7791:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":349,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:1"},"scope":1112,"src":"7615:258:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"9159:2104:1","statements":[{"assignments":[377],"declarations":[{"constant":false,"id":377,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:1","nodeType":"VariableDeclaration","scope":518,"src":"9543:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":376,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":380,"initialValue":{"expression":{"id":378,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"9563:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:1","memberName":"length","nodeType":"MemberAccess","src":"9563:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:1"},{"assignments":[382],"declarations":[{"constant":false,"id":382,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:1","nodeType":"VariableDeclaration","scope":518,"src":"9586:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":381,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":385,"initialValue":{"expression":{"id":383,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"9610:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:1","memberName":"length","nodeType":"MemberAccess","src":"9610:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":386,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"9675:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":387,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"9687:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:1","memberName":"length","nodeType":"MemberAccess","src":"9687:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":390,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"9703:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":398,"nodeType":"IfStatement","src":"9671:113:1","trueBody":{"id":397,"nodeType":"Block","src":"9722:62:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":394,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"9743:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":396,"nodeType":"RevertStatement","src":"9736:37:1"}]}},{"assignments":[403],"declarations":[{"constant":false,"id":403,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:1","nodeType":"VariableDeclaration","scope":518,"src":"10028:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":402,"nodeType":"ArrayTypeName","src":"10028:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":409,"initialValue":{"arguments":[{"id":407,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"10068:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":404,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":405,"nodeType":"ArrayTypeName","src":"10058:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:1"},{"assignments":[411],"declarations":[{"constant":false,"id":411,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:1","nodeType":"VariableDeclaration","scope":518,"src":"10092:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":410,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":413,"initialValue":{"hexValue":"30","id":412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:1"},{"assignments":[415],"declarations":[{"constant":false,"id":415,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:1","nodeType":"VariableDeclaration","scope":518,"src":"10121:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":414,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":417,"initialValue":{"hexValue":"30","id":416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:1"},{"assignments":[419],"declarations":[{"constant":false,"id":419,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:1","nodeType":"VariableDeclaration","scope":518,"src":"10150:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":421,"initialValue":{"hexValue":"30","id":420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:1"},{"body":{"id":481,"nodeType":"Block","src":"10590:310:1","statements":[{"assignments":[433],"declarations":[{"constant":false,"id":433,"mutability":"mutable","name":"a","nameLocation":"10612:1:1","nodeType":"VariableDeclaration","scope":481,"src":"10604:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":432,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":446,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":434,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"10616:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":435,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"10626:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":441,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"10658:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":444,"indexExpression":{"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:1","subExpression":{"id":442,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"10665:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:1","trueExpression":{"baseExpression":{"id":437,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"10638:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":440,"indexExpression":{"id":439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:1","subExpression":{"id":438,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"10645:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:1"},{"assignments":[448],"declarations":[{"constant":false,"id":448,"mutability":"mutable","name":"b","nameLocation":"10697:1:1","nodeType":"VariableDeclaration","scope":481,"src":"10689:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":447,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":470,"initialValue":{"condition":{"baseExpression":{"id":449,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":368,"src":"10701:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":451,"indexExpression":{"id":450,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"10712:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":465,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"10813:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":468,"indexExpression":{"id":467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:1","subExpression":{"id":466,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"10819:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:1","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":452,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"10734:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":453,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"10744:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":459,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"10776:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":462,"indexExpression":{"id":461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:1","subExpression":{"id":460,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"10783:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:1","trueExpression":{"baseExpression":{"id":455,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"10756:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":458,"indexExpression":{"id":457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:1","subExpression":{"id":456,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":411,"src":"10763:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":464,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:1"},{"expression":{"id":479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":471,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"10844:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":473,"indexExpression":{"id":472,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"10851:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":476,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":433,"src":"10884:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":477,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"10887:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":474,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"10856:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$39_$","typeString":"type(library Hashes)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:1","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":26,"src":"10856:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":480,"nodeType":"ExpressionStatement","src":"10844:45:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":426,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"10566:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":427,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"10570:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":482,"initializationExpression":{"assignments":[423],"declarations":[{"constant":false,"id":423,"mutability":"mutable","name":"i","nameLocation":"10559:1:1","nodeType":"VariableDeclaration","scope":482,"src":"10551:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":422,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":425,"initialValue":{"hexValue":"30","id":424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:1"},"loopExpression":{"expression":{"id":430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:1","subExpression":{"id":429,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":423,"src":"10585:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":431,"nodeType":"ExpressionStatement","src":"10585:3:1"},"nodeType":"ForStatement","src":"10546:354:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":483,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"10914:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"11155:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":515,"nodeType":"Block","src":"11217:40:1","statements":[{"expression":{"baseExpression":{"id":511,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"11238:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":513,"indexExpression":{"hexValue":"30","id":512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":375,"id":514,"nodeType":"Return","src":"11231:15:1"}]},"id":516,"nodeType":"IfStatement","src":"11151:106:1","trueBody":{"id":510,"nodeType":"Block","src":"11170:41:1","statements":[{"expression":{"baseExpression":{"id":506,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"11191:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":508,"indexExpression":{"hexValue":"30","id":507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":375,"id":509,"nodeType":"Return","src":"11184:16:1"}]}},"id":517,"nodeType":"IfStatement","src":"10910:347:1","trueBody":{"id":502,"nodeType":"Block","src":"10933:212:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":486,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"10951:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":487,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":365,"src":"10963:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:1","memberName":"length","nodeType":"MemberAccess","src":"10963:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":494,"nodeType":"IfStatement","src":"10947:100:1","trueBody":{"id":493,"nodeType":"Block","src":"10977:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":490,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"11002:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":492,"nodeType":"RevertStatement","src":"10995:37:1"}]}},{"id":501,"nodeType":"UncheckedBlock","src":"11060:75:1","statements":[{"expression":{"baseExpression":{"id":495,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":403,"src":"11095:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":499,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"11102:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":497,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":375,"id":500,"nodeType":"Return","src":"11088:32:1"}]}]}}]},"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"7879:1100:1","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:1","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":365,"mutability":"mutable","name":"proof","nameLocation":"9037:5:1","nodeType":"VariableDeclaration","scope":519,"src":"9020:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":364,"nodeType":"ArrayTypeName","src":"9020:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:1","nodeType":"VariableDeclaration","scope":519,"src":"9052:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":366,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":367,"nodeType":"ArrayTypeName","src":"9052:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":371,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:1","nodeType":"VariableDeclaration","scope":519,"src":"9086:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":370,"nodeType":"ArrayTypeName","src":"9086:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:1"},"returnParameters":{"id":375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:1","nodeType":"VariableDeclaration","scope":519,"src":"9139:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:1"},"scope":1112,"src":"8984:2279:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":555,"nodeType":"Block","src":"12112:84:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":547,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":523,"src":"12147:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":548,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"12154:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":549,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"12166:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":550,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"12174:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":546,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[519,723],"referencedDeclaration":723,"src":"12129:17:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":552,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"12185:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":545,"id":554,"nodeType":"Return","src":"12122:67:1"}]},"documentation":{"id":520,"nodeType":"StructuredDocumentation","src":"11269:590:1","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":556,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:1","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"proof","nameLocation":"11916:5:1","nodeType":"VariableDeclaration","scope":556,"src":"11899:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":522,"nodeType":"ArrayTypeName","src":"11899:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":526,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:1","nodeType":"VariableDeclaration","scope":556,"src":"11931:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":524,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":525,"nodeType":"ArrayTypeName","src":"11931:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":528,"mutability":"mutable","name":"root","nameLocation":"11973:4:1","nodeType":"VariableDeclaration","scope":556,"src":"11965:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":527,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":531,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:1","nodeType":"VariableDeclaration","scope":556,"src":"11987:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":530,"nodeType":"ArrayTypeName","src":"11987:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:1","nodeType":"VariableDeclaration","scope":556,"src":"12020:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":540,"nodeType":"FunctionTypeName","parameterTypes":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"12029:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"12038:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":534,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:1"},"returnParameterTypes":{"id":539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":540,"src":"12061:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:1"},"src":"12020:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:1"},"returnParameters":{"id":545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":556,"src":"12106:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":543,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:1"},"scope":1112,"src":"11864:332:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":722,"nodeType":"Block","src":"13545:2083:1","statements":[{"assignments":[582],"declarations":[{"constant":false,"id":582,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:1","nodeType":"VariableDeclaration","scope":722,"src":"13929:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":581,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":585,"initialValue":{"expression":{"id":583,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"13949:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:1","memberName":"length","nodeType":"MemberAccess","src":"13949:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:1"},{"assignments":[587],"declarations":[{"constant":false,"id":587,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:1","nodeType":"VariableDeclaration","scope":722,"src":"13972:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":586,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":590,"initialValue":{"expression":{"id":588,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"13996:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:1","memberName":"length","nodeType":"MemberAccess","src":"13996:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":591,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"14061:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":592,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"14073:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:1","memberName":"length","nodeType":"MemberAccess","src":"14073:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":595,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"14089:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":603,"nodeType":"IfStatement","src":"14057:113:1","trueBody":{"id":602,"nodeType":"Block","src":"14108:62:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":599,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"14129:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":601,"nodeType":"RevertStatement","src":"14122:37:1"}]}},{"assignments":[608],"declarations":[{"constant":false,"id":608,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:1","nodeType":"VariableDeclaration","scope":722,"src":"14414:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":607,"nodeType":"ArrayTypeName","src":"14414:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":614,"initialValue":{"arguments":[{"id":612,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"14454:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":610,"nodeType":"ArrayTypeName","src":"14444:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:1"},{"assignments":[616],"declarations":[{"constant":false,"id":616,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:1","nodeType":"VariableDeclaration","scope":722,"src":"14478:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":618,"initialValue":{"hexValue":"30","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:1"},{"assignments":[620],"declarations":[{"constant":false,"id":620,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:1","nodeType":"VariableDeclaration","scope":722,"src":"14507:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":619,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":622,"initialValue":{"hexValue":"30","id":621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:1"},{"assignments":[624],"declarations":[{"constant":false,"id":624,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:1","nodeType":"VariableDeclaration","scope":722,"src":"14536:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":623,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":626,"initialValue":{"hexValue":"30","id":625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:1"},{"body":{"id":685,"nodeType":"Block","src":"14976:289:1","statements":[{"assignments":[638],"declarations":[{"constant":false,"id":638,"mutability":"mutable","name":"a","nameLocation":"14998:1:1","nodeType":"VariableDeclaration","scope":685,"src":"14990:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":651,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":639,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"15002:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":640,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"15012:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":646,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"15044:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":649,"indexExpression":{"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:1","subExpression":{"id":647,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"15051:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:1","trueExpression":{"baseExpression":{"id":642,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"15024:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":645,"indexExpression":{"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:1","subExpression":{"id":643,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"15031:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:1"},{"assignments":[653],"declarations":[{"constant":false,"id":653,"mutability":"mutable","name":"b","nameLocation":"15083:1:1","nodeType":"VariableDeclaration","scope":685,"src":"15075:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":675,"initialValue":{"condition":{"baseExpression":{"id":654,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"15087:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":656,"indexExpression":{"id":655,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"15098:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":670,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"15199:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":673,"indexExpression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:1","subExpression":{"id":671,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"15205:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:1","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":657,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"15120:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":658,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"15130:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":664,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"15162:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":667,"indexExpression":{"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:1","subExpression":{"id":665,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":620,"src":"15169:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:1","trueExpression":{"baseExpression":{"id":660,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"15142:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":663,"indexExpression":{"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:1","subExpression":{"id":661,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"15149:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":669,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:1"},{"expression":{"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":676,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"15230:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":678,"indexExpression":{"id":677,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"15237:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":680,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"15249:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":681,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":653,"src":"15252:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":679,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":576,"src":"15242:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":684,"nodeType":"ExpressionStatement","src":"15230:24:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":631,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"14952:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":632,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"14956:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":686,"initializationExpression":{"assignments":[628],"declarations":[{"constant":false,"id":628,"mutability":"mutable","name":"i","nameLocation":"14945:1:1","nodeType":"VariableDeclaration","scope":686,"src":"14937:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":630,"initialValue":{"hexValue":"30","id":629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:1"},"loopExpression":{"expression":{"id":635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:1","subExpression":{"id":634,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"14971:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":636,"nodeType":"ExpressionStatement","src":"14971:3:1"},"nodeType":"ForStatement","src":"14932:333:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":687,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"15279:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":707,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":582,"src":"15520:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":719,"nodeType":"Block","src":"15582:40:1","statements":[{"expression":{"baseExpression":{"id":715,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"15603:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":717,"indexExpression":{"hexValue":"30","id":716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":580,"id":718,"nodeType":"Return","src":"15596:15:1"}]},"id":720,"nodeType":"IfStatement","src":"15516:106:1","trueBody":{"id":714,"nodeType":"Block","src":"15535:41:1","statements":[{"expression":{"baseExpression":{"id":710,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"15556:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":712,"indexExpression":{"hexValue":"30","id":711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":580,"id":713,"nodeType":"Return","src":"15549:16:1"}]}},"id":721,"nodeType":"IfStatement","src":"15275:347:1","trueBody":{"id":706,"nodeType":"Block","src":"15298:212:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":690,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":624,"src":"15316:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":691,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"15328:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:1","memberName":"length","nodeType":"MemberAccess","src":"15328:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":698,"nodeType":"IfStatement","src":"15312:100:1","trueBody":{"id":697,"nodeType":"Block","src":"15342:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":694,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"15367:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":696,"nodeType":"RevertStatement","src":"15360:37:1"}]}},{"id":705,"nodeType":"UncheckedBlock","src":"15425:75:1","statements":[{"expression":{"baseExpression":{"id":699,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":608,"src":"15460:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":703,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":700,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"15467:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":580,"id":704,"nodeType":"Return","src":"15453:32:1"}]}]}}]},"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"12202:1097:1","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":723,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:1","nodeType":"FunctionDefinition","parameters":{"id":577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"proof","nameLocation":"13357:5:1","nodeType":"VariableDeclaration","scope":723,"src":"13340:22:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":559,"nodeType":"ArrayTypeName","src":"13340:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:1","nodeType":"VariableDeclaration","scope":723,"src":"13372:24:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":561,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":562,"nodeType":"ArrayTypeName","src":"13372:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":566,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:1","nodeType":"VariableDeclaration","scope":723,"src":"13406:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":565,"nodeType":"ArrayTypeName","src":"13406:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:1","nodeType":"VariableDeclaration","scope":723,"src":"13439:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":575,"nodeType":"FunctionTypeName","parameterTypes":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":568,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":575,"src":"13448:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":567,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":575,"src":"13457:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:1"},"returnParameterTypes":{"id":574,"nodeType":"ParameterList","parameters":[{"constant":false,"id":573,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":575,"src":"13480:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:1"},"src":"13439:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:1"},"returnParameters":{"id":580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":579,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:1","nodeType":"VariableDeclaration","scope":723,"src":"13525:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":578,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:1"},"scope":1112,"src":"13304:2324:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":748,"nodeType":"Block","src":"16436:84:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":741,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"16479:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":742,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"16486:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":743,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"16498:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":740,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[907,1111],"referencedDeclaration":907,"src":"16453:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":745,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":732,"src":"16509:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":739,"id":747,"nodeType":"Return","src":"16446:67:1"}]},"documentation":{"id":724,"nodeType":"StructuredDocumentation","src":"15634:603:1","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":749,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:1","nodeType":"FunctionDefinition","parameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":727,"mutability":"mutable","name":"proof","nameLocation":"16304:5:1","nodeType":"VariableDeclaration","scope":749,"src":"16285:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":725,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":726,"nodeType":"ArrayTypeName","src":"16285:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":730,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:1","nodeType":"VariableDeclaration","scope":749,"src":"16319:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":728,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":729,"nodeType":"ArrayTypeName","src":"16319:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":732,"mutability":"mutable","name":"root","nameLocation":"16363:4:1","nodeType":"VariableDeclaration","scope":749,"src":"16355:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":731,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:1","nodeType":"VariableDeclaration","scope":749,"src":"16377:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":733,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":734,"nodeType":"ArrayTypeName","src":"16377:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:1"},"returnParameters":{"id":739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":738,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":749,"src":"16430:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":737,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:1"},"scope":1112,"src":"16242:278:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":906,"nodeType":"Block","src":"17820:2104:1","statements":[{"assignments":[765],"declarations":[{"constant":false,"id":765,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:1","nodeType":"VariableDeclaration","scope":906,"src":"18204:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":764,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":768,"initialValue":{"expression":{"id":766,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"18224:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:1","memberName":"length","nodeType":"MemberAccess","src":"18224:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:1"},{"assignments":[770],"declarations":[{"constant":false,"id":770,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:1","nodeType":"VariableDeclaration","scope":906,"src":"18247:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":769,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":773,"initialValue":{"expression":{"id":771,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"18271:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:1","memberName":"length","nodeType":"MemberAccess","src":"18271:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":774,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"18336:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":775,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"18348:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:1","memberName":"length","nodeType":"MemberAccess","src":"18348:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":778,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"18364:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":779,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":786,"nodeType":"IfStatement","src":"18332:113:1","trueBody":{"id":785,"nodeType":"Block","src":"18383:62:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":782,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"18404:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":784,"nodeType":"RevertStatement","src":"18397:37:1"}]}},{"assignments":[791],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:1","nodeType":"VariableDeclaration","scope":906,"src":"18689:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":789,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":790,"nodeType":"ArrayTypeName","src":"18689:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":797,"initialValue":{"arguments":[{"id":795,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"18729:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":794,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":792,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":793,"nodeType":"ArrayTypeName","src":"18719:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:1"},{"assignments":[799],"declarations":[{"constant":false,"id":799,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:1","nodeType":"VariableDeclaration","scope":906,"src":"18753:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":798,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":801,"initialValue":{"hexValue":"30","id":800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:1"},{"assignments":[803],"declarations":[{"constant":false,"id":803,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:1","nodeType":"VariableDeclaration","scope":906,"src":"18782:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":802,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":805,"initialValue":{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:1"},{"assignments":[807],"declarations":[{"constant":false,"id":807,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:1","nodeType":"VariableDeclaration","scope":906,"src":"18811:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":806,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":809,"initialValue":{"hexValue":"30","id":808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:1"},{"body":{"id":869,"nodeType":"Block","src":"19251:310:1","statements":[{"assignments":[821],"declarations":[{"constant":false,"id":821,"mutability":"mutable","name":"a","nameLocation":"19273:1:1","nodeType":"VariableDeclaration","scope":869,"src":"19265:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":820,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":834,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":822,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"19277:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":823,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"19287:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":829,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"19319:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":832,"indexExpression":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:1","subExpression":{"id":830,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"19326:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:1","trueExpression":{"baseExpression":{"id":825,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"19299:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":828,"indexExpression":{"id":827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:1","subExpression":{"id":826,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"19306:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:1"},{"assignments":[836],"declarations":[{"constant":false,"id":836,"mutability":"mutable","name":"b","nameLocation":"19358:1:1","nodeType":"VariableDeclaration","scope":869,"src":"19350:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":858,"initialValue":{"condition":{"baseExpression":{"id":837,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"19362:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":839,"indexExpression":{"id":838,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"19373:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":853,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"19474:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":856,"indexExpression":{"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:1","subExpression":{"id":854,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"19480:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:1","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":842,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":840,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"19395:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":841,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"19405:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":847,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"19437:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":850,"indexExpression":{"id":849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:1","subExpression":{"id":848,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"19444:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:1","trueExpression":{"baseExpression":{"id":843,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"19417:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":846,"indexExpression":{"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:1","subExpression":{"id":844,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"19424:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":852,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:1"},{"expression":{"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":859,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"19505:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":861,"indexExpression":{"id":860,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"19512:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":864,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"19545:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":865,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"19548:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":862,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"19517:6:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$39_$","typeString":"type(library Hashes)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:1","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":26,"src":"19517:27:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":868,"nodeType":"ExpressionStatement","src":"19505:45:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":814,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"19227:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":815,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"19231:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":870,"initializationExpression":{"assignments":[811],"declarations":[{"constant":false,"id":811,"mutability":"mutable","name":"i","nameLocation":"19220:1:1","nodeType":"VariableDeclaration","scope":870,"src":"19212:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":813,"initialValue":{"hexValue":"30","id":812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:1"},"loopExpression":{"expression":{"id":818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:1","subExpression":{"id":817,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"19246:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":819,"nodeType":"ExpressionStatement","src":"19246:3:1"},"nodeType":"ForStatement","src":"19207:354:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":871,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"19575:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":872,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":891,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"19816:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":903,"nodeType":"Block","src":"19878:40:1","statements":[{"expression":{"baseExpression":{"id":899,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"19899:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":901,"indexExpression":{"hexValue":"30","id":900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":763,"id":902,"nodeType":"Return","src":"19892:15:1"}]},"id":904,"nodeType":"IfStatement","src":"19812:106:1","trueBody":{"id":898,"nodeType":"Block","src":"19831:41:1","statements":[{"expression":{"baseExpression":{"id":894,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":759,"src":"19852:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":896,"indexExpression":{"hexValue":"30","id":895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":763,"id":897,"nodeType":"Return","src":"19845:16:1"}]}},"id":905,"nodeType":"IfStatement","src":"19571:347:1","trueBody":{"id":890,"nodeType":"Block","src":"19594:212:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":807,"src":"19612:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":875,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":753,"src":"19624:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:1","memberName":"length","nodeType":"MemberAccess","src":"19624:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":882,"nodeType":"IfStatement","src":"19608:100:1","trueBody":{"id":881,"nodeType":"Block","src":"19638:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":878,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"19663:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":879,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":880,"nodeType":"RevertStatement","src":"19656:37:1"}]}},{"id":889,"nodeType":"UncheckedBlock","src":"19721:75:1","statements":[{"expression":{"baseExpression":{"id":883,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"19756:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":887,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":884,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":770,"src":"19763:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":763,"id":888,"nodeType":"Return","src":"19749:32:1"}]}]}}]},"documentation":{"id":750,"nodeType":"StructuredDocumentation","src":"16526:1102:1","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":907,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:1","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":753,"mutability":"mutable","name":"proof","nameLocation":"17696:5:1","nodeType":"VariableDeclaration","scope":907,"src":"17677:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":751,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":752,"nodeType":"ArrayTypeName","src":"17677:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":756,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:1","nodeType":"VariableDeclaration","scope":907,"src":"17711:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":754,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":755,"nodeType":"ArrayTypeName","src":"17711:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:1","nodeType":"VariableDeclaration","scope":907,"src":"17747:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":757,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":758,"nodeType":"ArrayTypeName","src":"17747:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:1"},"returnParameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:1","nodeType":"VariableDeclaration","scope":907,"src":"17800:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:1"},"scope":1112,"src":"17633:2291:1","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":943,"nodeType":"Block","src":"20795:92:1","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":935,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"20838:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":936,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"20845:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":937,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"20857:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":938,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"20865:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":934,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[907,1111],"referencedDeclaration":1111,"src":"20812:25:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":940,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"20876:4:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":933,"id":942,"nodeType":"Return","src":"20805:75:1"}]},"documentation":{"id":908,"nodeType":"StructuredDocumentation","src":"19930:600:1","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":944,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:1","nodeType":"FunctionDefinition","parameters":{"id":930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"proof","nameLocation":"20597:5:1","nodeType":"VariableDeclaration","scope":944,"src":"20578:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":909,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":910,"nodeType":"ArrayTypeName","src":"20578:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":914,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:1","nodeType":"VariableDeclaration","scope":944,"src":"20612:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":912,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":913,"nodeType":"ArrayTypeName","src":"20612:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"root","nameLocation":"20656:4:1","nodeType":"VariableDeclaration","scope":944,"src":"20648:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":919,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:1","nodeType":"VariableDeclaration","scope":944,"src":"20670:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":917,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":918,"nodeType":"ArrayTypeName","src":"20670:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":929,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:1","nodeType":"VariableDeclaration","scope":944,"src":"20703:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":928,"nodeType":"FunctionTypeName","parameterTypes":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"20712:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":920,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"20721:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:1"},"returnParameterTypes":{"id":927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"20744:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":925,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:1"},"src":"20703:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:1"},"returnParameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":944,"src":"20789:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":931,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:1"},"scope":1112,"src":"20535:352:1","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1110,"nodeType":"Block","src":"22250:2083:1","statements":[{"assignments":[970],"declarations":[{"constant":false,"id":970,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:1","nodeType":"VariableDeclaration","scope":1110,"src":"22634:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":973,"initialValue":{"expression":{"id":971,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"22654:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:1","memberName":"length","nodeType":"MemberAccess","src":"22654:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:1"},{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:1","nodeType":"VariableDeclaration","scope":1110,"src":"22677:21:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":974,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":978,"initialValue":{"expression":{"id":976,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"22701:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:1","memberName":"length","nodeType":"MemberAccess","src":"22701:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":979,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"22766:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":980,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"22778:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:1","memberName":"length","nodeType":"MemberAccess","src":"22778:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":983,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"22794:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":991,"nodeType":"IfStatement","src":"22762:113:1","trueBody":{"id":990,"nodeType":"Block","src":"22813:62:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":987,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"22834:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":989,"nodeType":"RevertStatement","src":"22827:37:1"}]}},{"assignments":[996],"declarations":[{"constant":false,"id":996,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:1","nodeType":"VariableDeclaration","scope":1110,"src":"23119:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":994,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":995,"nodeType":"ArrayTypeName","src":"23119:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1002,"initialValue":{"arguments":[{"id":1000,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"23159:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":999,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:1","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":998,"nodeType":"ArrayTypeName","src":"23149:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:1"},{"assignments":[1004],"declarations":[{"constant":false,"id":1004,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:1","nodeType":"VariableDeclaration","scope":1110,"src":"23183:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1003,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1006,"initialValue":{"hexValue":"30","id":1005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:1"},{"assignments":[1008],"declarations":[{"constant":false,"id":1008,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:1","nodeType":"VariableDeclaration","scope":1110,"src":"23212:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1007,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1010,"initialValue":{"hexValue":"30","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:1"},{"assignments":[1012],"declarations":[{"constant":false,"id":1012,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:1","nodeType":"VariableDeclaration","scope":1110,"src":"23241:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1014,"initialValue":{"hexValue":"30","id":1013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:1"},{"body":{"id":1073,"nodeType":"Block","src":"23681:289:1","statements":[{"assignments":[1026],"declarations":[{"constant":false,"id":1026,"mutability":"mutable","name":"a","nameLocation":"23703:1:1","nodeType":"VariableDeclaration","scope":1073,"src":"23695:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1025,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1039,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1027,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"23707:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1028,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"23717:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1034,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"23749:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1037,"indexExpression":{"id":1036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:1","subExpression":{"id":1035,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"23756:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:1","trueExpression":{"baseExpression":{"id":1030,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"23729:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1033,"indexExpression":{"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:1","subExpression":{"id":1031,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"23736:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:1"},{"assignments":[1041],"declarations":[{"constant":false,"id":1041,"mutability":"mutable","name":"b","nameLocation":"23788:1:1","nodeType":"VariableDeclaration","scope":1073,"src":"23780:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1040,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1063,"initialValue":{"condition":{"baseExpression":{"id":1042,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"23792:10:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1044,"indexExpression":{"id":1043,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"23803:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1058,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"23904:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1061,"indexExpression":{"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:1","subExpression":{"id":1059,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"23910:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:1","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1045,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"23825:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1046,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"23835:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1052,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"23867:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1055,"indexExpression":{"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:1","subExpression":{"id":1053,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1008,"src":"23874:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:1","trueExpression":{"baseExpression":{"id":1048,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"23847:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1051,"indexExpression":{"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:1","subExpression":{"id":1049,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"23854:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1057,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:1"},{"expression":{"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1064,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"23935:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1066,"indexExpression":{"id":1065,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"23942:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1068,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1026,"src":"23954:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1069,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"23957:1:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1067,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"23947:6:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1072,"nodeType":"ExpressionStatement","src":"23935:24:1"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1019,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"23657:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1020,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"23661:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1074,"initializationExpression":{"assignments":[1016],"declarations":[{"constant":false,"id":1016,"mutability":"mutable","name":"i","nameLocation":"23650:1:1","nodeType":"VariableDeclaration","scope":1074,"src":"23642:9:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1015,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1018,"initialValue":{"hexValue":"30","id":1017,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:1"},"loopExpression":{"expression":{"id":1023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:1","subExpression":{"id":1022,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"23676:1:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1024,"nodeType":"ExpressionStatement","src":"23676:3:1"},"nodeType":"ForStatement","src":"23637:333:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1075,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"23984:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1095,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"24225:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1107,"nodeType":"Block","src":"24287:40:1","statements":[{"expression":{"baseExpression":{"id":1103,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"24308:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1105,"indexExpression":{"hexValue":"30","id":1104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":968,"id":1106,"nodeType":"Return","src":"24301:15:1"}]},"id":1108,"nodeType":"IfStatement","src":"24221:106:1","trueBody":{"id":1102,"nodeType":"Block","src":"24240:41:1","statements":[{"expression":{"baseExpression":{"id":1098,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"24261:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1100,"indexExpression":{"hexValue":"30","id":1099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":968,"id":1101,"nodeType":"Return","src":"24254:16:1"}]}},"id":1109,"nodeType":"IfStatement","src":"23980:347:1","trueBody":{"id":1094,"nodeType":"Block","src":"24003:212:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1078,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"24021:8:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1079,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"24033:5:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:1","memberName":"length","nodeType":"MemberAccess","src":"24033:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1086,"nodeType":"IfStatement","src":"24017:100:1","trueBody":{"id":1085,"nodeType":"Block","src":"24047:70:1","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1082,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":47,"src":"24072:28:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1084,"nodeType":"RevertStatement","src":"24065:37:1"}]}},{"id":1093,"nodeType":"UncheckedBlock","src":"24130:75:1","statements":[{"expression":{"baseExpression":{"id":1087,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"24165:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1091,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1088,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":975,"src":"24172:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:1","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":968,"id":1092,"nodeType":"Return","src":"24158:32:1"}]}]}}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"20893:1099:1","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1111,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:1","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":948,"mutability":"mutable","name":"proof","nameLocation":"22060:5:1","nodeType":"VariableDeclaration","scope":1111,"src":"22041:24:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":947,"nodeType":"ArrayTypeName","src":"22041:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":951,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:1","nodeType":"VariableDeclaration","scope":1111,"src":"22075:26:1","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":949,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":950,"nodeType":"ArrayTypeName","src":"22075:6:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":954,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:1","nodeType":"VariableDeclaration","scope":1111,"src":"22111:23:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":953,"nodeType":"ArrayTypeName","src":"22111:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:1","nodeType":"VariableDeclaration","scope":1111,"src":"22144:56:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":963,"nodeType":"FunctionTypeName","parameterTypes":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":963,"src":"22153:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":955,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":963,"src":"22162:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:1"},"returnParameterTypes":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":963,"src":"22185:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:1"},"src":"22144:56:1","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:1"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:1","nodeType":"VariableDeclaration","scope":1111,"src":"22230:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:1"},"scope":1112,"src":"21997:2336:1","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":1113,"src":"1353:22982:1","usedErrors":[47],"usedEvents":[]}],"src":"206:24130:1"},"id":1},"contracts/MerkleDrawManager/MerkleDrawManager.sol":{"ast":{"absolutePath":"contracts/MerkleDrawManager/MerkleDrawManager.sol","exportedSymbols":{"Hashes":[39],"MerkleDrawManager":[1376],"MerkleProof":[1112]},"id":1377,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1114,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"33:24:2"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1377,"sourceUnit":1113,"src":"61:68:2","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleDrawManager","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1376,"linearizedBaseContracts":[1376],"name":"MerkleDrawManager","nameLocation":"142:17:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"MerkleDrawManager.Draw","id":1124,"members":[{"constant":false,"id":1117,"mutability":"mutable","name":"merkleRoot","nameLocation":"198:10:2","nodeType":"VariableDeclaration","scope":1124,"src":"190:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"190:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"drawBlockNumber","nameLocation":"227:15:2","nodeType":"VariableDeclaration","scope":1124,"src":"219:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1118,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1121,"mutability":"mutable","name":"seed","nameLocation":"261:4:2","nodeType":"VariableDeclaration","scope":1124,"src":"253:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1120,"name":"bytes32","nodeType":"ElementaryTypeName","src":"253:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1123,"mutability":"mutable","name":"seedGenerated","nameLocation":"281:13:2","nodeType":"VariableDeclaration","scope":1124,"src":"276:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1122,"name":"bool","nodeType":"ElementaryTypeName","src":"276:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"Draw","nameLocation":"174:4:2","nodeType":"StructDefinition","scope":1376,"src":"167:135:2","visibility":"public"},{"constant":false,"functionSelector":"0cc36c36","id":1129,"mutability":"mutable","name":"draws","nameLocation":"342:5:2","nodeType":"VariableDeclaration","scope":1376,"src":"310:37:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw)"},"typeName":{"id":1128,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1125,"name":"uint256","nodeType":"ElementaryTypeName","src":"318:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"310:24:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1127,"nodeType":"UserDefinedTypeName","pathNode":{"id":1126,"name":"Draw","nameLocations":["329:4:2"],"nodeType":"IdentifierPath","referencedDeclaration":1124,"src":"329:4:2"},"referencedDeclaration":1124,"src":"329:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"0597c657522cdc182a5b033c23db479e0102722a452f096523b3091c3ece3f1f","id":1137,"name":"DrawCreated","nameLocation":"362:11:2","nodeType":"EventDefinition","parameters":{"id":1136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"indexed":true,"mutability":"mutable","name":"drawId","nameLocation":"390:6:2","nodeType":"VariableDeclaration","scope":1137,"src":"374:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1130,"name":"uint256","nodeType":"ElementaryTypeName","src":"374:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1133,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"406:10:2","nodeType":"VariableDeclaration","scope":1137,"src":"398:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1132,"name":"bytes32","nodeType":"ElementaryTypeName","src":"398:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1135,"indexed":false,"mutability":"mutable","name":"drawBlockNumber","nameLocation":"426:15:2","nodeType":"VariableDeclaration","scope":1137,"src":"418:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1134,"name":"uint256","nodeType":"ElementaryTypeName","src":"418:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"373:69:2"},"src":"356:87:2"},{"anonymous":false,"eventSelector":"307583fd274bd2f891397898b2525ea924e4708e61f545ff6e399e5420f34aa9","id":1143,"name":"SeedGenerated","nameLocation":"455:13:2","nodeType":"EventDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"indexed":true,"mutability":"mutable","name":"drawId","nameLocation":"485:6:2","nodeType":"VariableDeclaration","scope":1143,"src":"469:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1138,"name":"uint256","nodeType":"ElementaryTypeName","src":"469:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1141,"indexed":false,"mutability":"mutable","name":"seed","nameLocation":"501:4:2","nodeType":"VariableDeclaration","scope":1143,"src":"493:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1140,"name":"bytes32","nodeType":"ElementaryTypeName","src":"493:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"468:38:2"},"src":"449:58:2"},{"body":{"id":1188,"nodeType":"Block","src":"685:419:2","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":1154,"name":"draws","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"704:5:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw storage ref)"}},"id":1156,"indexExpression":{"id":1155,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"710:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"704:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage","typeString":"struct MerkleDrawManager.Draw storage ref"}},"id":1157,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"718:10:2","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1117,"src":"704:24:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"732:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"704:29:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4472617720616c726561647920657869737473","id":1160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"735:21:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990","typeString":"literal_string \"Draw already exists\""},"value":"Draw already exists"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990","typeString":"literal_string \"Draw already exists\""}],"id":1153,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"696:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"696:61:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1162,"nodeType":"ExpressionStatement","src":"696:61:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1164,"name":"drawBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"776:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1165,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"794:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"800:6:2","memberName":"number","nodeType":"MemberAccess","src":"794:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"776:30:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4472617720626c6f636b206d75737420626520696e2074686520667574757265","id":1168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"808:34:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92","typeString":"literal_string \"Draw block must be in the future\""},"value":"Draw block must be in the future"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92","typeString":"literal_string \"Draw block must be in the future\""}],"id":1163,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"768:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"768:75:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1170,"nodeType":"ExpressionStatement","src":"768:75:2"},{"expression":{"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1171,"name":"draws","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"856:5:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw storage ref)"}},"id":1173,"indexExpression":{"id":1172,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"862:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"856:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage","typeString":"struct MerkleDrawManager.Draw storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1175,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"904:10:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1176,"name":"drawBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"946:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":1177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"982:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"66616c7365","id":1178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1013:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1174,"name":"Draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"872:4:2","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Draw_$1124_storage_ptr_$","typeString":"type(struct MerkleDrawManager.Draw storage pointer)"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["892:10:2","929:15:2","976:4:2","998:13:2"],"names":["merkleRoot","drawBlockNumber","seed","seedGenerated"],"nodeType":"FunctionCall","src":"872:158:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_memory_ptr","typeString":"struct MerkleDrawManager.Draw memory"}},"src":"856:174:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage","typeString":"struct MerkleDrawManager.Draw storage ref"}},"id":1181,"nodeType":"ExpressionStatement","src":"856:174:2"},{"eventCall":{"arguments":[{"id":1183,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"1060:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1184,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1148,"src":"1068:10:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1185,"name":"drawBlockNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"1080:15:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1182,"name":"DrawCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"1048:11:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (uint256,bytes32,uint256)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:48:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1187,"nodeType":"EmitStatement","src":"1043:53:2"}]},"documentation":{"id":1144,"nodeType":"StructuredDocumentation","src":"515:74:2","text":"@notice Create a new draw with its Merkle root and future block number"},"functionSelector":"a5afd138","id":1189,"implemented":true,"kind":"function","modifiers":[],"name":"createDraw","nameLocation":"604:10:2","nodeType":"FunctionDefinition","parameters":{"id":1151,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1146,"mutability":"mutable","name":"drawId","nameLocation":"623:6:2","nodeType":"VariableDeclaration","scope":1189,"src":"615:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1145,"name":"uint256","nodeType":"ElementaryTypeName","src":"615:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1148,"mutability":"mutable","name":"merkleRoot","nameLocation":"639:10:2","nodeType":"VariableDeclaration","scope":1189,"src":"631:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1147,"name":"bytes32","nodeType":"ElementaryTypeName","src":"631:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1150,"mutability":"mutable","name":"drawBlockNumber","nameLocation":"659:15:2","nodeType":"VariableDeclaration","scope":1189,"src":"651:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1149,"name":"uint256","nodeType":"ElementaryTypeName","src":"651:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"614:61:2"},"returnParameters":{"id":1152,"nodeType":"ParameterList","parameters":[],"src":"685:0:2"},"scope":1376,"src":"595:509:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1264,"nodeType":"Block","src":"1224:522:2","statements":[{"assignments":[1197],"declarations":[{"constant":false,"id":1197,"mutability":"mutable","name":"draw","nameLocation":"1248:4:2","nodeType":"VariableDeclaration","scope":1264,"src":"1235:17:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"},"typeName":{"id":1196,"nodeType":"UserDefinedTypeName","pathNode":{"id":1195,"name":"Draw","nameLocations":["1235:4:2"],"nodeType":"IdentifierPath","referencedDeclaration":1124,"src":"1235:4:2"},"referencedDeclaration":1124,"src":"1235:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"}},"visibility":"internal"}],"id":1201,"initialValue":{"baseExpression":{"id":1198,"name":"draws","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"1255:5:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw storage ref)"}},"id":1200,"indexExpression":{"id":1199,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"1261:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1255:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage","typeString":"struct MerkleDrawManager.Draw storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1235:33:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1203,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1287:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1204,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1292:10:2","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1117,"src":"1287:15:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1306:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1287:20:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4472617720646f6573206e6f74206578697374","id":1207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1309:21:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e","typeString":"literal_string \"Draw does not exist\""},"value":"Draw does not exist"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e","typeString":"literal_string \"Draw does not exist\""}],"id":1202,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1279:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1208,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1279:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1209,"nodeType":"ExpressionStatement","src":"1279:52:2"},{"expression":{"arguments":[{"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1350:19:2","subExpression":{"expression":{"id":1211,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1351:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1356:13:2","memberName":"seedGenerated","nodeType":"MemberAccess","referencedDeclaration":1123,"src":"1351:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5365656420616c72656164792067656e657261746564","id":1214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1371:24:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533","typeString":"literal_string \"Seed already generated\""},"value":"Seed already generated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533","typeString":"literal_string \"Seed already generated\""}],"id":1210,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1342:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:54:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1216,"nodeType":"ExpressionStatement","src":"1342:54:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1218,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1415:5:2","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1421:6:2","memberName":"number","nodeType":"MemberAccess","src":"1415:12:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1220,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1430:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1221,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1435:15:2","memberName":"drawBlockNumber","nodeType":"MemberAccess","referencedDeclaration":1119,"src":"1430:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1415:35:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4472617720626c6f636b206e6f742072656163686564","id":1223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1452:24:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3","typeString":"literal_string \"Draw block not reached\""},"value":"Draw block not reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3","typeString":"literal_string \"Draw block not reached\""}],"id":1217,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1407:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1407:70:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1225,"nodeType":"ExpressionStatement","src":"1407:70:2"},{"assignments":[1227],"declarations":[{"constant":false,"id":1227,"mutability":"mutable","name":"bh","nameLocation":"1498:2:2","nodeType":"VariableDeclaration","scope":1264,"src":"1490:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1226,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1490:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1232,"initialValue":{"arguments":[{"expression":{"id":1229,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1513:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1230,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1518:15:2","memberName":"drawBlockNumber","nodeType":"MemberAccess","referencedDeclaration":1119,"src":"1513:20:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1228,"name":"blockhash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-5,"src":"1503:9:2","typeDescriptions":{"typeIdentifier":"t_function_blockhash_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1503:31:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1490:44:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1234,"name":"bh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"1553:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1235,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1559:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1553:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"426c6f636b68617368206e6f7420617661696c61626c65","id":1237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1562:25:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5","typeString":"literal_string \"Blockhash not available\""},"value":"Blockhash not available"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5","typeString":"literal_string \"Blockhash not available\""}],"id":1233,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1545:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1545:43:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1239,"nodeType":"ExpressionStatement","src":"1545:43:2"},{"expression":{"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1240,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1601:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1242,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1606:4:2","memberName":"seed","nodeType":"MemberAccess","referencedDeclaration":1121,"src":"1601:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1246,"name":"bh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1227,"src":"1640:2:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1247,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"1644:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1244,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1623:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1627:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"1623:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1623:28:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1243,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1613:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1613:39:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1601:51:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1251,"nodeType":"ExpressionStatement","src":"1601:51:2"},{"expression":{"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1252,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1663:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1668:13:2","memberName":"seedGenerated","nodeType":"MemberAccess","referencedDeclaration":1123,"src":"1663:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1684:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1663:25:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1257,"nodeType":"ExpressionStatement","src":"1663:25:2"},{"eventCall":{"arguments":[{"id":1259,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"1720:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":1260,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1197,"src":"1728:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1733:4:2","memberName":"seed","nodeType":"MemberAccess","referencedDeclaration":1121,"src":"1728:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1258,"name":"SeedGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"1706:13:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (uint256,bytes32)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1706:32:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1263,"nodeType":"EmitStatement","src":"1701:37:2"}]},"documentation":{"id":1190,"nodeType":"StructuredDocumentation","src":"1112:59:2","text":"@notice Generate the seed from the predefined blockhash"},"functionSelector":"424611c3","id":1265,"implemented":true,"kind":"function","modifiers":[],"name":"generateSeed","nameLocation":"1186:12:2","nodeType":"FunctionDefinition","parameters":{"id":1193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"drawId","nameLocation":"1207:6:2","nodeType":"VariableDeclaration","scope":1265,"src":"1199:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1191,"name":"uint256","nodeType":"ElementaryTypeName","src":"1199:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1198:16:2"},"returnParameters":{"id":1194,"nodeType":"ParameterList","parameters":[],"src":"1224:0:2"},"scope":1376,"src":"1177:569:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1303,"nodeType":"Block","src":"1890:234:2","statements":[{"assignments":[1277],"declarations":[{"constant":false,"id":1277,"mutability":"mutable","name":"draw","nameLocation":"1914:4:2","nodeType":"VariableDeclaration","scope":1303,"src":"1901:17:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"},"typeName":{"id":1276,"nodeType":"UserDefinedTypeName","pathNode":{"id":1275,"name":"Draw","nameLocations":["1901:4:2"],"nodeType":"IdentifierPath","referencedDeclaration":1124,"src":"1901:4:2"},"referencedDeclaration":1124,"src":"1901:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"}},"visibility":"internal"}],"id":1281,"initialValue":{"baseExpression":{"id":1278,"name":"draws","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"1921:5:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw storage ref)"}},"id":1280,"indexExpression":{"id":1279,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"1927:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1921:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage","typeString":"struct MerkleDrawManager.Draw storage ref"}},"nodeType":"VariableDeclarationStatement","src":"1901:33:2"},{"expression":{"arguments":[{"expression":{"id":1283,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"1953:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1284,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1958:13:2","memberName":"seedGenerated","nodeType":"MemberAccess","referencedDeclaration":1123,"src":"1953:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656564206e6f742067656e65726174656420796574","id":1285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1973:24:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a","typeString":"literal_string \"Seed not generated yet\""},"value":"Seed not generated yet"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a","typeString":"literal_string \"Seed not generated yet\""}],"id":1282,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1945:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1945:53:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1287,"nodeType":"ExpressionStatement","src":"1945:53:2"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1289,"name":"totalParticipants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"2017:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2037:1:2","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2017:21:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4e6f207061727469636970616e7473","id":1292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2040:17:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f","typeString":"literal_string \"No participants\""},"value":"No participants"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f","typeString":"literal_string \"No participants\""}],"id":1288,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2009:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2009:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1294,"nodeType":"ExpressionStatement","src":"2009:49:2"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1297,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1277,"src":"2086:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2091:4:2","memberName":"seed","nodeType":"MemberAccess","referencedDeclaration":1121,"src":"2086:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1296,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2078:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1295,"name":"uint256","nodeType":"ElementaryTypeName","src":"2078:7:2","typeDescriptions":{}}},"id":1299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2078:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1300,"name":"totalParticipants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"2099:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2078:38:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1274,"id":1302,"nodeType":"Return","src":"2071:45:2"}]},"documentation":{"id":1266,"nodeType":"StructuredDocumentation","src":"1754:33:2","text":"@notice Get the winning index"},"functionSelector":"e26024c2","id":1304,"implemented":true,"kind":"function","modifiers":[],"name":"getWinnerIndex","nameLocation":"1802:14:2","nodeType":"FunctionDefinition","parameters":{"id":1271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1268,"mutability":"mutable","name":"drawId","nameLocation":"1825:6:2","nodeType":"VariableDeclaration","scope":1304,"src":"1817:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"1817:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1270,"mutability":"mutable","name":"totalParticipants","nameLocation":"1841:17:2","nodeType":"VariableDeclaration","scope":1304,"src":"1833:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1269,"name":"uint256","nodeType":"ElementaryTypeName","src":"1833:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1816:43:2"},"returnParameters":{"id":1274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1273,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1304,"src":"1881:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1272,"name":"uint256","nodeType":"ElementaryTypeName","src":"1881:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1880:9:2"},"scope":1376,"src":"1793:331:2","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1374,"nodeType":"Block","src":"2422:536:2","statements":[{"assignments":[1323],"declarations":[{"constant":false,"id":1323,"mutability":"mutable","name":"draw","nameLocation":"2446:4:2","nodeType":"VariableDeclaration","scope":1374,"src":"2433:17:2","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"},"typeName":{"id":1322,"nodeType":"UserDefinedTypeName","pathNode":{"id":1321,"name":"Draw","nameLocations":["2433:4:2"],"nodeType":"IdentifierPath","referencedDeclaration":1124,"src":"2433:4:2"},"referencedDeclaration":1124,"src":"2433:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw"}},"visibility":"internal"}],"id":1327,"initialValue":{"baseExpression":{"id":1324,"name":"draws","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1129,"src":"2453:5:2","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_Draw_$1124_storage_$","typeString":"mapping(uint256 => struct MerkleDrawManager.Draw storage ref)"}},"id":1326,"indexExpression":{"id":1325,"name":"drawId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"2459:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2453:13:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage","typeString":"struct MerkleDrawManager.Draw storage ref"}},"nodeType":"VariableDeclarationStatement","src":"2433:33:2"},{"expression":{"arguments":[{"expression":{"id":1329,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"2485:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1330,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2490:13:2","memberName":"seedGenerated","nodeType":"MemberAccess","referencedDeclaration":1123,"src":"2485:18:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656564206e6f742067656e657261746564","id":1331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2505:20:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f","typeString":"literal_string \"Seed not generated\""},"value":"Seed not generated"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f","typeString":"literal_string \"Seed not generated\""}],"id":1328,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2477:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2477:49:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1333,"nodeType":"ExpressionStatement","src":"2477:49:2"},{"assignments":[1335],"declarations":[{"constant":false,"id":1335,"mutability":"mutable","name":"leaf","nameLocation":"2578:4:2","nodeType":"VariableDeclaration","scope":1374,"src":"2570:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2570:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1343,"initialValue":{"arguments":[{"arguments":[{"id":1339,"name":"leafIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2612:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1340,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2623:4:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1337,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2595:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2599:12:2","memberName":"encodePacked","nodeType":"MemberAccess","src":"2595:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2595:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1336,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2585:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2585:44:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2570:59:2"},{"assignments":[1345],"declarations":[{"constant":false,"id":1345,"mutability":"mutable","name":"validProof","nameLocation":"2679:10:2","nodeType":"VariableDeclaration","scope":1374,"src":"2674:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1344,"name":"bool","nodeType":"ElementaryTypeName","src":"2674:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":1353,"initialValue":{"arguments":[{"id":1348,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"2719:5:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"expression":{"id":1349,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"2726:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1350,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2731:10:2","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1117,"src":"2726:15:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1351,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1335,"src":"2743:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1346,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"2692:11:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_MerkleProof_$1112_$","typeString":"type(library MerkleProof)"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2704:14:2","memberName":"verifyCalldata","nodeType":"MemberAccess","referencedDeclaration":212,"src":"2692:26:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$","typeString":"function (bytes32[] calldata,bytes32,bytes32) pure returns (bool)"}},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2692:56:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2674:74:2"},{"condition":{"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2763:11:2","subExpression":{"id":1354,"name":"validProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1345,"src":"2764:10:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1358,"nodeType":"IfStatement","src":"2759:29:2","trueBody":{"expression":{"hexValue":"66616c7365","id":1356,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2783:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":1320,"id":1357,"nodeType":"Return","src":"2776:12:2"}},{"assignments":[1360],"declarations":[{"constant":false,"id":1360,"mutability":"mutable","name":"winnerIndex","nameLocation":"2854:11:2","nodeType":"VariableDeclaration","scope":1374,"src":"2846:19:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1359,"name":"uint256","nodeType":"ElementaryTypeName","src":"2846:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1368,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":1363,"name":"draw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1323,"src":"2876:4:2","typeDescriptions":{"typeIdentifier":"t_struct$_Draw_$1124_storage_ptr","typeString":"struct MerkleDrawManager.Draw storage pointer"}},"id":1364,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2881:4:2","memberName":"seed","nodeType":"MemberAccess","referencedDeclaration":1121,"src":"2876:9:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2868:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1361,"name":"uint256","nodeType":"ElementaryTypeName","src":"2868:7:2","typeDescriptions":{}}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2868:18:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1366,"name":"totalParticipants","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"2889:17:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2868:38:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2846:60:2"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1369,"name":"leafIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1311,"src":"2925:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1370,"name":"winnerIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"2938:11:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2925:24:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1372,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2924:26:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1320,"id":1373,"nodeType":"Return","src":"2917:33:2"}]},"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"2132:79:2","text":"@notice Verify if an address is the winner using its index and Merkle proof"},"functionSelector":"f53f4ed6","id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"verifyWinner","nameLocation":"2226:12:2","nodeType":"FunctionDefinition","parameters":{"id":1317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"drawId","nameLocation":"2257:6:2","nodeType":"VariableDeclaration","scope":1375,"src":"2249:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"2249:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1309,"mutability":"mutable","name":"totalParticipants","nameLocation":"2282:17:2","nodeType":"VariableDeclaration","scope":1375,"src":"2274:25:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"2274:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1311,"mutability":"mutable","name":"leafIndex","nameLocation":"2318:9:2","nodeType":"VariableDeclaration","scope":1375,"src":"2310:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1310,"name":"uint256","nodeType":"ElementaryTypeName","src":"2310:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1313,"mutability":"mutable","name":"user","nameLocation":"2346:4:2","nodeType":"VariableDeclaration","scope":1375,"src":"2338:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1312,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"proof","nameLocation":"2380:5:2","nodeType":"VariableDeclaration","scope":1375,"src":"2361:24:2","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1314,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2361:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1315,"nodeType":"ArrayTypeName","src":"2361:9:2","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"2238:154:2"},"returnParameters":{"id":1320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1319,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1375,"src":"2416:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1318,"name":"bool","nodeType":"ElementaryTypeName","src":"2416:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2415:6:2"},"scope":1376,"src":"2217:741:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1377,"src":"133:2828:2","usedErrors":[],"usedEvents":[1137,1143]}],"src":"33:2930:2"},"id":2}},"contracts":{"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b66bf6dcab31c139255fde1eecd03ea719c1beed635de0ae2a3d4b07c85591cf64736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH12 0xF6DCAB31C139255FDE1EECD0 RETURNDATACOPY 0xA7 NOT 0xC1 0xBE 0xED PUSH4 0x5DE0AE2A RETURNDATASIZE 0x4B SMOD 0xC8 SSTORE SWAP2 0xCF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"221:811:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b66bf6dcab31c139255fde1eecd03ea719c1beed635de0ae2a3d4b07c85591cf64736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB6 PUSH12 0xF6DCAB31C139255FDE1EECD0 RETURNDATACOPY 0xA7 NOT 0xC1 0xBE 0xED PUSH4 0x5DE0AE2A RETURNDATASIZE 0x4B SMOD 0xC8 SSTORE SWAP2 0xCF PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"221:811:0:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae1901d992abdc86968fb5627205ea48fbadc0c9023c476a9e977183b11fedd964736f6c63430008140033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE NOT ADD 0xD9 SWAP3 0xAB 0xDC DUP7 SWAP7 DUP16 0xB5 PUSH3 0x7205EA BASEFEE 0xFB 0xAD 0xC0 0xC9 MUL EXTCODECOPY SELFBALANCE PUSH11 0x9E977183B11FEDD964736F PUSH13 0x63430008140033000000000000 ","sourceMap":"1353:22982:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ae1901d992abdc86968fb5627205ea48fbadc0c9023c476a9e977183b11fedd964736f6c63430008140033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAE NOT ADD 0xD9 SWAP3 0xAB 0xDC DUP7 SWAP7 DUP16 0xB5 PUSH3 0x7205EA BASEFEE 0xFB 0xAD 0xC0 0xC9 MUL EXTCODECOPY SELFBALANCE PUSH11 0x9E977183B11FEDD964736F PUSH13 0x63430008140033000000000000 ","sourceMap":"1353:22982:1:-:0;;;;;;;;"},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]}},\"version\":1}","storageLayout":{"storage":[],"types":null}}},"contracts/MerkleDrawManager/MerkleDrawManager.sol":{"MerkleDrawManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"drawId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"drawBlockNumber","type":"uint256"}],"name":"DrawCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"drawId","type":"uint256"},{"indexed":false,"internalType":"bytes32","name":"seed","type":"bytes32"}],"name":"SeedGenerated","type":"event"},{"inputs":[{"internalType":"uint256","name":"drawId","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"drawBlockNumber","type":"uint256"}],"name":"createDraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"draws","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"drawBlockNumber","type":"uint256"},{"internalType":"bytes32","name":"seed","type":"bytes32"},{"internalType":"bool","name":"seedGenerated","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"drawId","type":"uint256"}],"name":"generateSeed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"drawId","type":"uint256"},{"internalType":"uint256","name":"totalParticipants","type":"uint256"}],"name":"getWinnerIndex","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"drawId","type":"uint256"},{"internalType":"uint256","name":"totalParticipants","type":"uint256"},{"internalType":"uint256","name":"leafIndex","type":"uint256"},{"internalType":"address","name":"user","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"verifyWinner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1073 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCC36C36 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x424611C3 EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0xA5AFD138 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0xE26024C2 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0xF53F4ED6 EQ PUSH2 0xF7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x72D JUMP JUMPDEST PUSH2 0x127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x86 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x79D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA4 SWAP2 SWAP1 PUSH2 0x72D JUMP JUMPDEST PUSH2 0x164 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x861 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x111 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10C SWAP2 SWAP1 PUSH2 0x97F JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xA19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BA SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x215 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD NUMBER GT PUSH2 0x25B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x252 SWAP1 PUSH2 0xB69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD BLOCKHASH SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 SUB PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP1 PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BD SWAP3 SWAP2 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH32 0x307583FD274BD2F891397898B2525EA924E4708E61F545FF6E399E5420F34AA9 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x32C SWAP2 SWAP1 PUSH2 0xC63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x393 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38A SWAP1 PUSH2 0xCCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST NUMBER DUP2 GT PUSH2 0x3D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3CC SWAP1 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP3 PUSH32 0x597C657522CDC182A5B033C23DB479E0102722A452F096523B3091C3ECE3F1F DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x481 SWAP3 SWAP2 SWAP1 PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4ED SWAP1 PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP1 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 PUSH1 0x2 ADD SLOAD PUSH1 0x0 SHR PUSH2 0x54C SWAP2 SWAP1 PUSH2 0xE86 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5B4 SWAP1 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5D2 SWAP3 SWAP2 SWAP1 PUSH2 0xF6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x5FC DUP7 DUP7 DUP6 PUSH1 0x0 ADD SLOAD DUP6 PUSH2 0x63A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x60F JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x630 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP5 PUSH1 0x2 ADD SLOAD PUSH1 0x0 SHR PUSH2 0x624 SWAP2 SWAP1 PUSH2 0xE86 JUMP JUMPDEST SWAP1 POP DUP1 DUP10 EQ SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x648 DUP7 DUP7 DUP6 PUSH2 0x653 JUMP JUMPDEST EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP6 SWAP1 POP DUP2 LT ISZERO PUSH2 0x69F JUMPI PUSH2 0x68A DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x67E JUMPI PUSH2 0x67D PUSH2 0xF97 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 0x697 SWAP1 PUSH2 0xFF5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x65C JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x6C3 JUMPI PUSH2 0x6BE DUP3 DUP5 PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x6CD DUP4 DUP4 PUSH2 0x6D6 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x70A DUP2 PUSH2 0x6F7 JUMP JUMPDEST DUP2 EQ PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x727 DUP2 PUSH2 0x701 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x743 JUMPI PUSH2 0x742 PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x751 DUP5 DUP3 DUP6 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x76D DUP2 PUSH2 0x75A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x77C DUP2 PUSH2 0x6F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x797 DUP2 PUSH2 0x782 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x7B2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x764 JUMP JUMPDEST PUSH2 0x7BF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x7CC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x764 JUMP JUMPDEST PUSH2 0x7D9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x78E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7EB DUP2 PUSH2 0x75A JUMP JUMPDEST DUP2 EQ PUSH2 0x7F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x808 DUP2 PUSH2 0x7E2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x827 JUMPI PUSH2 0x826 PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x835 DUP7 DUP3 DUP8 ADD PUSH2 0x718 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x846 DUP7 DUP3 DUP8 ADD PUSH2 0x7F9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x857 DUP7 DUP3 DUP8 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x878 JUMPI PUSH2 0x877 PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x886 DUP6 DUP3 DUP7 ADD PUSH2 0x718 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x897 DUP6 DUP3 DUP7 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x773 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E7 DUP3 PUSH2 0x8BC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8F7 DUP2 PUSH2 0x8DC JUMP JUMPDEST DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x914 DUP2 PUSH2 0x8EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x93F JUMPI PUSH2 0x93E PUSH2 0x91A JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x95C JUMPI PUSH2 0x95B PUSH2 0x91F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x978 JUMPI PUSH2 0x977 PUSH2 0x924 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x99C JUMPI PUSH2 0x99B PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x9AA DUP10 DUP3 DUP11 ADD PUSH2 0x718 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x9BB DUP10 DUP3 DUP11 ADD PUSH2 0x718 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x9CC DUP10 DUP3 DUP11 ADD PUSH2 0x718 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x9DD DUP10 DUP3 DUP11 ADD PUSH2 0x905 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9FE JUMPI PUSH2 0x9FD PUSH2 0x6F2 JUMP JUMPDEST JUMPDEST PUSH2 0xA0A DUP10 DUP3 DUP11 ADD PUSH2 0x929 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x78E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4472617720646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA7B PUSH1 0x13 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xA86 DUP3 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xAAA DUP2 PUSH2 0xA6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5365656420616C72656164792067656E65726174656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE7 PUSH1 0x16 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xAF2 DUP3 PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB16 DUP2 PUSH2 0xADA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4472617720626C6F636B206E6F74207265616368656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB53 PUSH1 0x16 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xB5E DUP3 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB82 DUP2 PUSH2 0xB46 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x426C6F636B68617368206E6F7420617661696C61626C65000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBBF PUSH1 0x17 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xBCA DUP3 PUSH2 0xB89 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBEE DUP2 PUSH2 0xBB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC10 PUSH2 0xC0B DUP3 PUSH2 0x75A JUMP JUMPDEST PUSH2 0xBF5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC31 PUSH2 0xC2C DUP3 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0xC16 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC43 DUP3 DUP6 PUSH2 0xBFF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0xC53 DUP3 DUP5 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC78 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x764 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4472617720616C72656164792065786973747300000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB4 PUSH1 0x13 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xCBF DUP3 PUSH2 0xC7E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCE3 DUP2 PUSH2 0xCA7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4472617720626C6F636B206D75737420626520696E2074686520667574757265 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD20 PUSH1 0x20 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xD2B DUP3 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD4F DUP2 PUSH2 0xD13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xD6B PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x764 JUMP JUMPDEST PUSH2 0xD78 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x773 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x53656564206E6F742067656E6572617465642079657400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB5 PUSH1 0x16 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xDC0 DUP3 PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDE4 DUP2 PUSH2 0xDA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F207061727469636970616E74730000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE21 PUSH1 0xF DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xE2C DUP3 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE50 DUP2 PUSH2 0xE14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE91 DUP3 PUSH2 0x6F7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE9C DUP4 PUSH2 0x6F7 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xEAC JUMPI PUSH2 0xEAB PUSH2 0xE57 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656564206E6F742067656E6572617465640000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEED PUSH1 0x12 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xEF8 DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF1C DUP2 PUSH2 0xEE0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3B DUP3 PUSH2 0xF23 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF4D DUP3 PUSH2 0xF30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF65 PUSH2 0xF60 DUP3 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xF42 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF77 DUP3 DUP6 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0xF87 DUP3 DUP5 PUSH2 0xF54 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP3 PUSH2 0x6F7 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1032 JUMPI PUSH2 0x1031 PUSH2 0xFC6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xC4 SLOAD MLOAD PUSH22 0xF650D538D19BA18BE116E8D512AEBC9982D107C5BAAA MSTORE8 MSIZE BASEFEE 0xF8 JUMPDEST PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"133:2828:2:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@commutativeKeccak256_26":{"entryPoint":1707,"id":26,"parameterSlots":2,"returnSlots":1},"@createDraw_1189":{"entryPoint":825,"id":1189,"parameterSlots":3,"returnSlots":0},"@draws_1129":{"entryPoint":295,"id":1129,"parameterSlots":0,"returnSlots":0},"@efficientKeccak256_38":{"entryPoint":1750,"id":38,"parameterSlots":2,"returnSlots":1},"@generateSeed_1265":{"entryPoint":356,"id":1265,"parameterSlots":1,"returnSlots":0},"@getWinnerIndex_1304":{"entryPoint":1166,"id":1304,"parameterSlots":2,"returnSlots":1},"@processProofCalldata_253":{"entryPoint":1619,"id":253,"parameterSlots":3,"returnSlots":1},"@verifyCalldata_212":{"entryPoint":1594,"id":212,"parameterSlots":4,"returnSlots":1},"@verifyWinner_1375":{"entryPoint":1365,"id":1375,"parameterSlots":6,"returnSlots":1},"abi_decode_t_address":{"entryPoint":2309,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":2345,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes32":{"entryPoint":2041,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":1816,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":1837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_bytes32t_uint256":{"entryPoint":2062,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":2145,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256t_uint256t_uint256t_addresst_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":2431,"id":null,"parameterSlots":2,"returnSlots":6},"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack":{"entryPoint":3924,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":1934,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1892,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack":{"entryPoint":3071,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533_to_t_string_memory_ptr_fromStack":{"entryPoint":2778,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92_to_t_string_memory_ptr_fromStack":{"entryPoint":3347,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a_to_t_string_memory_ptr_fromStack":{"entryPoint":3496,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f_to_t_string_memory_ptr_fromStack":{"entryPoint":3604,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990_to_t_string_memory_ptr_fromStack":{"entryPoint":3239,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e_to_t_string_memory_ptr_fromStack":{"entryPoint":2670,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f_to_t_string_memory_ptr_fromStack":{"entryPoint":3808,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3_to_t_string_memory_ptr_fromStack":{"entryPoint":2886,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5_to_t_string_memory_ptr_fromStack":{"entryPoint":2994,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1907,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack":{"entryPoint":3104,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes32_t_uint256__to_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":3127,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_uint256_t_address__to_t_uint256_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":3947,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":2585,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":3171,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":3414,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_bytes32_t_bool__to_t_bytes32_t_uint256_t_bytes32_t_bool__fromStack_reversed":{"entryPoint":1949,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2813,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3382,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3531,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3639,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3274,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2705,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3843,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2921,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":3029,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":2209,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":2612,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":2268,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":1922,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1882,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":2236,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1783,"id":null,"parameterSlots":1,"returnSlots":1},"increment_t_uint256":{"entryPoint":4085,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_address":{"entryPoint":3906,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_bytes32":{"entryPoint":3061,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint160":{"entryPoint":3888,"id":null,"parameterSlots":1,"returnSlots":1},"leftAlign_t_uint256":{"entryPoint":3094,"id":null,"parameterSlots":1,"returnSlots":1},"mod_t_uint256":{"entryPoint":3718,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4038,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":3671,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3991,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":2335,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":2330,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":2340,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1778,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1773,"id":null,"parameterSlots":0,"returnSlots":0},"shift_left_96":{"entryPoint":3875,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533":{"entryPoint":2737,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92":{"entryPoint":3306,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a":{"entryPoint":3455,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f":{"entryPoint":3563,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990":{"entryPoint":3198,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e":{"entryPoint":2629,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f":{"entryPoint":3767,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3":{"entryPoint":2845,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5":{"entryPoint":2953,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2286,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2018,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":1793,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:18807:3","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:3","statements":[{"nodeType":"YulAssignment","src":"57:19:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:3","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:3"},"nodeType":"YulFunctionCall","src":"67:9:3"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:3"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:3","type":""}],"src":"7:75:3"},{"body":{"nodeType":"YulBlock","src":"177:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:3"},"nodeType":"YulFunctionCall","src":"187:12:3"},"nodeType":"YulExpressionStatement","src":"187:12:3"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:3"},{"body":{"nodeType":"YulBlock","src":"300:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:3"},"nodeType":"YulFunctionCall","src":"310:12:3"},"nodeType":"YulExpressionStatement","src":"310:12:3"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:3"},{"body":{"nodeType":"YulBlock","src":"379:32:3","statements":[{"nodeType":"YulAssignment","src":"389:16:3","value":{"name":"value","nodeType":"YulIdentifier","src":"400:5:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:3"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:3","type":""}],"src":"334:77:3"},{"body":{"nodeType":"YulBlock","src":"460:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"517:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"526:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"529:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"519:6:3"},"nodeType":"YulFunctionCall","src":"519:12:3"},"nodeType":"YulExpressionStatement","src":"519:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"483:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"508:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"490:17:3"},"nodeType":"YulFunctionCall","src":"490:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"480:2:3"},"nodeType":"YulFunctionCall","src":"480:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"473:6:3"},"nodeType":"YulFunctionCall","src":"473:43:3"},"nodeType":"YulIf","src":"470:63:3"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"453:5:3","type":""}],"src":"417:122:3"},{"body":{"nodeType":"YulBlock","src":"597:87:3","statements":[{"nodeType":"YulAssignment","src":"607:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"629:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"616:12:3"},"nodeType":"YulFunctionCall","src":"616:20:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"607:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"672:5:3"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"645:26:3"},"nodeType":"YulFunctionCall","src":"645:33:3"},"nodeType":"YulExpressionStatement","src":"645:33:3"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"575:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"583:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"591:5:3","type":""}],"src":"545:139:3"},{"body":{"nodeType":"YulBlock","src":"756:263:3","statements":[{"body":{"nodeType":"YulBlock","src":"802:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"804:77:3"},"nodeType":"YulFunctionCall","src":"804:79:3"},"nodeType":"YulExpressionStatement","src":"804:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"777:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"786:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"773:3:3"},"nodeType":"YulFunctionCall","src":"773:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"798:2:3","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"769:3:3"},"nodeType":"YulFunctionCall","src":"769:32:3"},"nodeType":"YulIf","src":"766:119:3"},{"nodeType":"YulBlock","src":"895:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"910:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"924:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:3","type":""}]},{"nodeType":"YulAssignment","src":"939:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"974:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"985:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"970:3:3"},"nodeType":"YulFunctionCall","src":"970:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"994:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"949:20:3"},"nodeType":"YulFunctionCall","src":"949:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"939:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"726:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"737:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"749:6:3","type":""}],"src":"690:329:3"},{"body":{"nodeType":"YulBlock","src":"1070:32:3","statements":[{"nodeType":"YulAssignment","src":"1080:16:3","value":{"name":"value","nodeType":"YulIdentifier","src":"1091:5:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1080:7:3"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1052:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1062:7:3","type":""}],"src":"1025:77:3"},{"body":{"nodeType":"YulBlock","src":"1173:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1190:3:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1213:5:3"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1195:17:3"},"nodeType":"YulFunctionCall","src":"1195:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1183:6:3"},"nodeType":"YulFunctionCall","src":"1183:37:3"},"nodeType":"YulExpressionStatement","src":"1183:37:3"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1161:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1168:3:3","type":""}],"src":"1108:118:3"},{"body":{"nodeType":"YulBlock","src":"1297:53:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1314:3:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1337:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1319:17:3"},"nodeType":"YulFunctionCall","src":"1319:24:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1307:6:3"},"nodeType":"YulFunctionCall","src":"1307:37:3"},"nodeType":"YulExpressionStatement","src":"1307:37:3"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1285:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1292:3:3","type":""}],"src":"1232:118:3"},{"body":{"nodeType":"YulBlock","src":"1398:48:3","statements":[{"nodeType":"YulAssignment","src":"1408:32:3","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1433:5:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1426:6:3"},"nodeType":"YulFunctionCall","src":"1426:13:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1419:6:3"},"nodeType":"YulFunctionCall","src":"1419:21:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1408:7:3"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1380:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1390:7:3","type":""}],"src":"1356:90:3"},{"body":{"nodeType":"YulBlock","src":"1511:50:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1528:3:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1548:5:3"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1533:14:3"},"nodeType":"YulFunctionCall","src":"1533:21:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1521:6:3"},"nodeType":"YulFunctionCall","src":"1521:34:3"},"nodeType":"YulExpressionStatement","src":"1521:34:3"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1499:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1506:3:3","type":""}],"src":"1452:109:3"},{"body":{"nodeType":"YulBlock","src":"1743:365:3","statements":[{"nodeType":"YulAssignment","src":"1753:27:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1765:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1776:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1761:3:3"},"nodeType":"YulFunctionCall","src":"1761:19:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1753:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1834:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1847:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1858:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1843:3:3"},"nodeType":"YulFunctionCall","src":"1843:17:3"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1790:43:3"},"nodeType":"YulFunctionCall","src":"1790:71:3"},"nodeType":"YulExpressionStatement","src":"1790:71:3"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1915:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1928:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"1939:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1924:3:3"},"nodeType":"YulFunctionCall","src":"1924:18:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"1871:43:3"},"nodeType":"YulFunctionCall","src":"1871:72:3"},"nodeType":"YulExpressionStatement","src":"1871:72:3"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"1997:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2010:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2021:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2006:3:3"},"nodeType":"YulFunctionCall","src":"2006:18:3"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1953:43:3"},"nodeType":"YulFunctionCall","src":"1953:72:3"},"nodeType":"YulExpressionStatement","src":"1953:72:3"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"2073:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2086:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"2097:2:3","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2082:3:3"},"nodeType":"YulFunctionCall","src":"2082:18:3"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"2035:37:3"},"nodeType":"YulFunctionCall","src":"2035:66:3"},"nodeType":"YulExpressionStatement","src":"2035:66:3"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_bytes32_t_bool__to_t_bytes32_t_uint256_t_bytes32_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1691:9:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1703:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1711:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1719:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1727:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1738:4:3","type":""}],"src":"1567:541:3"},{"body":{"nodeType":"YulBlock","src":"2157:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"2214:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2223:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2226:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2216:6:3"},"nodeType":"YulFunctionCall","src":"2216:12:3"},"nodeType":"YulExpressionStatement","src":"2216:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2180:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2205:5:3"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"2187:17:3"},"nodeType":"YulFunctionCall","src":"2187:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2177:2:3"},"nodeType":"YulFunctionCall","src":"2177:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2170:6:3"},"nodeType":"YulFunctionCall","src":"2170:43:3"},"nodeType":"YulIf","src":"2167:63:3"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2150:5:3","type":""}],"src":"2114:122:3"},{"body":{"nodeType":"YulBlock","src":"2294:87:3","statements":[{"nodeType":"YulAssignment","src":"2304:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2326:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2313:12:3"},"nodeType":"YulFunctionCall","src":"2313:20:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2304:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2369:5:3"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"2342:26:3"},"nodeType":"YulFunctionCall","src":"2342:33:3"},"nodeType":"YulExpressionStatement","src":"2342:33:3"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2272:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"2280:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2288:5:3","type":""}],"src":"2242:139:3"},{"body":{"nodeType":"YulBlock","src":"2487:519:3","statements":[{"body":{"nodeType":"YulBlock","src":"2533:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2535:77:3"},"nodeType":"YulFunctionCall","src":"2535:79:3"},"nodeType":"YulExpressionStatement","src":"2535:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2508:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"2517:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2504:3:3"},"nodeType":"YulFunctionCall","src":"2504:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"2529:2:3","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2500:3:3"},"nodeType":"YulFunctionCall","src":"2500:32:3"},"nodeType":"YulIf","src":"2497:119:3"},{"nodeType":"YulBlock","src":"2626:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2641:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"2655:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2645:6:3","type":""}]},{"nodeType":"YulAssignment","src":"2670:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2705:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"2716:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2701:3:3"},"nodeType":"YulFunctionCall","src":"2701:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2725:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2680:20:3"},"nodeType":"YulFunctionCall","src":"2680:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2670:6:3"}]}]},{"nodeType":"YulBlock","src":"2753:118:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2768:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"2782:2:3","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2772:6:3","type":""}]},{"nodeType":"YulAssignment","src":"2798:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2833:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"2844:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2829:3:3"},"nodeType":"YulFunctionCall","src":"2829:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2853:7:3"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"2808:20:3"},"nodeType":"YulFunctionCall","src":"2808:53:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2798:6:3"}]}]},{"nodeType":"YulBlock","src":"2881:118:3","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"2910:2:3","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2900:6:3","type":""}]},{"nodeType":"YulAssignment","src":"2926:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2961:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"2972:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2957:3:3"},"nodeType":"YulFunctionCall","src":"2957:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2981:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"2936:20:3"},"nodeType":"YulFunctionCall","src":"2936:53:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2926:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256t_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2441:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2452:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2464:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2472:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2480:6:3","type":""}],"src":"2387:619:3"},{"body":{"nodeType":"YulBlock","src":"3095:391:3","statements":[{"body":{"nodeType":"YulBlock","src":"3141:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3143:77:3"},"nodeType":"YulFunctionCall","src":"3143:79:3"},"nodeType":"YulExpressionStatement","src":"3143:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3116:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"3125:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3112:3:3"},"nodeType":"YulFunctionCall","src":"3112:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"3137:2:3","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3108:3:3"},"nodeType":"YulFunctionCall","src":"3108:32:3"},"nodeType":"YulIf","src":"3105:119:3"},{"nodeType":"YulBlock","src":"3234:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3249:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"3263:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3253:6:3","type":""}]},{"nodeType":"YulAssignment","src":"3278:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3313:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"3324:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3309:3:3"},"nodeType":"YulFunctionCall","src":"3309:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3333:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3288:20:3"},"nodeType":"YulFunctionCall","src":"3288:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3278:6:3"}]}]},{"nodeType":"YulBlock","src":"3361:118:3","statements":[{"nodeType":"YulVariableDeclaration","src":"3376:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"3390:2:3","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3380:6:3","type":""}]},{"nodeType":"YulAssignment","src":"3406:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3441:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"3452:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3437:3:3"},"nodeType":"YulFunctionCall","src":"3437:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3461:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3416:20:3"},"nodeType":"YulFunctionCall","src":"3416:53:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3406:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3057:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3068:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3080:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3088:6:3","type":""}],"src":"3012:474:3"},{"body":{"nodeType":"YulBlock","src":"3590:124:3","statements":[{"nodeType":"YulAssignment","src":"3600:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3612:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3623:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3608:3:3"},"nodeType":"YulFunctionCall","src":"3608:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3600:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3680:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3693:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"3704:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3689:3:3"},"nodeType":"YulFunctionCall","src":"3689:17:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"3636:43:3"},"nodeType":"YulFunctionCall","src":"3636:71:3"},"nodeType":"YulExpressionStatement","src":"3636:71:3"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3562:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3574:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3585:4:3","type":""}],"src":"3492:222:3"},{"body":{"nodeType":"YulBlock","src":"3765:81:3","statements":[{"nodeType":"YulAssignment","src":"3775:65:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3790:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"3797:42:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3786:3:3"},"nodeType":"YulFunctionCall","src":"3786:54:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3775:7:3"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3747:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3757:7:3","type":""}],"src":"3720:126:3"},{"body":{"nodeType":"YulBlock","src":"3897:51:3","statements":[{"nodeType":"YulAssignment","src":"3907:35:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3936:5:3"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3918:17:3"},"nodeType":"YulFunctionCall","src":"3918:24:3"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3907:7:3"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3879:5:3","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3889:7:3","type":""}],"src":"3852:96:3"},{"body":{"nodeType":"YulBlock","src":"3997:79:3","statements":[{"body":{"nodeType":"YulBlock","src":"4054:16:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4063:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4066:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4056:6:3"},"nodeType":"YulFunctionCall","src":"4056:12:3"},"nodeType":"YulExpressionStatement","src":"4056:12:3"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4020:5:3"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4045:5:3"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4027:17:3"},"nodeType":"YulFunctionCall","src":"4027:24:3"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4017:2:3"},"nodeType":"YulFunctionCall","src":"4017:35:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4010:6:3"},"nodeType":"YulFunctionCall","src":"4010:43:3"},"nodeType":"YulIf","src":"4007:63:3"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3990:5:3","type":""}],"src":"3954:122:3"},{"body":{"nodeType":"YulBlock","src":"4134:87:3","statements":[{"nodeType":"YulAssignment","src":"4144:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4166:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4153:12:3"},"nodeType":"YulFunctionCall","src":"4153:20:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4144:5:3"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4209:5:3"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4182:26:3"},"nodeType":"YulFunctionCall","src":"4182:33:3"},"nodeType":"YulExpressionStatement","src":"4182:33:3"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4112:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"4120:3:3","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4128:5:3","type":""}],"src":"4082:139:3"},{"body":{"nodeType":"YulBlock","src":"4316:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4333:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4336:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4326:6:3"},"nodeType":"YulFunctionCall","src":"4326:12:3"},"nodeType":"YulExpressionStatement","src":"4326:12:3"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"4227:117:3"},{"body":{"nodeType":"YulBlock","src":"4439:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4456:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4459:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4449:6:3"},"nodeType":"YulFunctionCall","src":"4449:12:3"},"nodeType":"YulExpressionStatement","src":"4449:12:3"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"4350:117:3"},{"body":{"nodeType":"YulBlock","src":"4562:28:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4579:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4582:1:3","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4572:6:3"},"nodeType":"YulFunctionCall","src":"4572:12:3"},"nodeType":"YulExpressionStatement","src":"4572:12:3"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"4473:117:3"},{"body":{"nodeType":"YulBlock","src":"4703:478:3","statements":[{"body":{"nodeType":"YulBlock","src":"4752:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"4754:77:3"},"nodeType":"YulFunctionCall","src":"4754:79:3"},"nodeType":"YulExpressionStatement","src":"4754:79:3"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4731:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"4739:4:3","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4727:3:3"},"nodeType":"YulFunctionCall","src":"4727:17:3"},{"name":"end","nodeType":"YulIdentifier","src":"4746:3:3"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4723:3:3"},"nodeType":"YulFunctionCall","src":"4723:27:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4716:6:3"},"nodeType":"YulFunctionCall","src":"4716:35:3"},"nodeType":"YulIf","src":"4713:122:3"},{"nodeType":"YulAssignment","src":"4844:30:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4867:6:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4854:12:3"},"nodeType":"YulFunctionCall","src":"4854:20:3"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4844:6:3"}]},{"body":{"nodeType":"YulBlock","src":"4917:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"4919:77:3"},"nodeType":"YulFunctionCall","src":"4919:79:3"},"nodeType":"YulExpressionStatement","src":"4919:79:3"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4889:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"4897:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4886:2:3"},"nodeType":"YulFunctionCall","src":"4886:30:3"},"nodeType":"YulIf","src":"4883:117:3"},{"nodeType":"YulAssignment","src":"5009:29:3","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5025:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"5033:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5021:3:3"},"nodeType":"YulFunctionCall","src":"5021:17:3"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"5009:8:3"}]},{"body":{"nodeType":"YulBlock","src":"5092:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"5094:77:3"},"nodeType":"YulFunctionCall","src":"5094:79:3"},"nodeType":"YulExpressionStatement","src":"5094:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"5057:8:3"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5071:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"5079:4:3","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"5067:3:3"},"nodeType":"YulFunctionCall","src":"5067:17:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5053:3:3"},"nodeType":"YulFunctionCall","src":"5053:32:3"},{"name":"end","nodeType":"YulIdentifier","src":"5087:3:3"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5050:2:3"},"nodeType":"YulFunctionCall","src":"5050:41:3"},"nodeType":"YulIf","src":"5047:128:3"}]},"name":"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4670:6:3","type":""},{"name":"end","nodeType":"YulTypedName","src":"4678:3:3","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"4686:8:3","type":""},{"name":"length","nodeType":"YulTypedName","src":"4696:6:3","type":""}],"src":"4613:568:3"},{"body":{"nodeType":"YulBlock","src":"5356:972:3","statements":[{"body":{"nodeType":"YulBlock","src":"5403:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5405:77:3"},"nodeType":"YulFunctionCall","src":"5405:79:3"},"nodeType":"YulExpressionStatement","src":"5405:79:3"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5377:7:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"5386:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5373:3:3"},"nodeType":"YulFunctionCall","src":"5373:23:3"},{"kind":"number","nodeType":"YulLiteral","src":"5398:3:3","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5369:3:3"},"nodeType":"YulFunctionCall","src":"5369:33:3"},"nodeType":"YulIf","src":"5366:120:3"},{"nodeType":"YulBlock","src":"5496:117:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5511:15:3","value":{"kind":"number","nodeType":"YulLiteral","src":"5525:1:3","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5515:6:3","type":""}]},{"nodeType":"YulAssignment","src":"5540:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5575:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"5586:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5571:3:3"},"nodeType":"YulFunctionCall","src":"5571:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5595:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5550:20:3"},"nodeType":"YulFunctionCall","src":"5550:53:3"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5540:6:3"}]}]},{"nodeType":"YulBlock","src":"5623:118:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5638:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"5652:2:3","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5642:6:3","type":""}]},{"nodeType":"YulAssignment","src":"5668:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5703:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"5714:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5699:3:3"},"nodeType":"YulFunctionCall","src":"5699:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5723:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5678:20:3"},"nodeType":"YulFunctionCall","src":"5678:53:3"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5668:6:3"}]}]},{"nodeType":"YulBlock","src":"5751:118:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5766:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"5780:2:3","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5770:6:3","type":""}]},{"nodeType":"YulAssignment","src":"5796:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5831:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"5842:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5827:3:3"},"nodeType":"YulFunctionCall","src":"5827:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5851:7:3"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5806:20:3"},"nodeType":"YulFunctionCall","src":"5806:53:3"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5796:6:3"}]}]},{"nodeType":"YulBlock","src":"5879:118:3","statements":[{"nodeType":"YulVariableDeclaration","src":"5894:16:3","value":{"kind":"number","nodeType":"YulLiteral","src":"5908:2:3","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5898:6:3","type":""}]},{"nodeType":"YulAssignment","src":"5924:63:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5959:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"5970:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5955:3:3"},"nodeType":"YulFunctionCall","src":"5955:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5979:7:3"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5934:20:3"},"nodeType":"YulFunctionCall","src":"5934:53:3"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"5924:6:3"}]}]},{"nodeType":"YulBlock","src":"6007:314:3","statements":[{"nodeType":"YulVariableDeclaration","src":"6022:47:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6053:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6064:3:3","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6049:3:3"},"nodeType":"YulFunctionCall","src":"6049:19:3"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6036:12:3"},"nodeType":"YulFunctionCall","src":"6036:33:3"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6026:6:3","type":""}]},{"body":{"nodeType":"YulBlock","src":"6116:83:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"6118:77:3"},"nodeType":"YulFunctionCall","src":"6118:79:3"},"nodeType":"YulExpressionStatement","src":"6118:79:3"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6088:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"6096:18:3","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6085:2:3"},"nodeType":"YulFunctionCall","src":"6085:30:3"},"nodeType":"YulIf","src":"6082:117:3"},{"nodeType":"YulAssignment","src":"6213:98:3","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6283:9:3"},{"name":"offset","nodeType":"YulIdentifier","src":"6294:6:3"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6279:3:3"},"nodeType":"YulFunctionCall","src":"6279:22:3"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6303:7:3"}],"functionName":{"name":"abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulIdentifier","src":"6231:47:3"},"nodeType":"YulFunctionCall","src":"6231:80:3"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"6213:6:3"},{"name":"value5","nodeType":"YulIdentifier","src":"6221:6:3"}]}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_addresst_array$_t_bytes32_$dyn_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5286:9:3","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5297:7:3","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5309:6:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5317:6:3","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5325:6:3","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5333:6:3","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5341:6:3","type":""},{"name":"value5","nodeType":"YulTypedName","src":"5349:6:3","type":""}],"src":"5187:1141:3"},{"body":{"nodeType":"YulBlock","src":"6426:118:3","statements":[{"nodeType":"YulAssignment","src":"6436:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6448:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6459:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6444:3:3"},"nodeType":"YulFunctionCall","src":"6444:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6436:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6510:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6523:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"6534:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6519:3:3"},"nodeType":"YulFunctionCall","src":"6519:17:3"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"6472:37:3"},"nodeType":"YulFunctionCall","src":"6472:65:3"},"nodeType":"YulExpressionStatement","src":"6472:65:3"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6398:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6410:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6421:4:3","type":""}],"src":"6334:210:3"},{"body":{"nodeType":"YulBlock","src":"6646:73:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6663:3:3"},{"name":"length","nodeType":"YulIdentifier","src":"6668:6:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6656:6:3"},"nodeType":"YulFunctionCall","src":"6656:19:3"},"nodeType":"YulExpressionStatement","src":"6656:19:3"},{"nodeType":"YulAssignment","src":"6684:29:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6703:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"6708:4:3","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6699:3:3"},"nodeType":"YulFunctionCall","src":"6699:14:3"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"6684:11:3"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6618:3:3","type":""},{"name":"length","nodeType":"YulTypedName","src":"6623:6:3","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"6634:11:3","type":""}],"src":"6550:169:3"},{"body":{"nodeType":"YulBlock","src":"6831:63:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6853:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"6861:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6849:3:3"},"nodeType":"YulFunctionCall","src":"6849:14:3"},{"hexValue":"4472617720646f6573206e6f74206578697374","kind":"string","nodeType":"YulLiteral","src":"6865:21:3","type":"","value":"Draw does not exist"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6842:6:3"},"nodeType":"YulFunctionCall","src":"6842:45:3"},"nodeType":"YulExpressionStatement","src":"6842:45:3"}]},"name":"store_literal_in_memory_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6823:6:3","type":""}],"src":"6725:169:3"},{"body":{"nodeType":"YulBlock","src":"7046:220:3","statements":[{"nodeType":"YulAssignment","src":"7056:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7122:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"7127:2:3","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7063:58:3"},"nodeType":"YulFunctionCall","src":"7063:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7056:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7228:3:3"}],"functionName":{"name":"store_literal_in_memory_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e","nodeType":"YulIdentifier","src":"7139:88:3"},"nodeType":"YulFunctionCall","src":"7139:93:3"},"nodeType":"YulExpressionStatement","src":"7139:93:3"},{"nodeType":"YulAssignment","src":"7241:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7252:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"7257:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7248:3:3"},"nodeType":"YulFunctionCall","src":"7248:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7241:3:3"}]}]},"name":"abi_encode_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7034:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7042:3:3","type":""}],"src":"6900:366:3"},{"body":{"nodeType":"YulBlock","src":"7443:248:3","statements":[{"nodeType":"YulAssignment","src":"7453:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7465:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7476:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7461:3:3"},"nodeType":"YulFunctionCall","src":"7461:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7453:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7500:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"7511:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7496:3:3"},"nodeType":"YulFunctionCall","src":"7496:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7519:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"7525:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7515:3:3"},"nodeType":"YulFunctionCall","src":"7515:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7489:6:3"},"nodeType":"YulFunctionCall","src":"7489:47:3"},"nodeType":"YulExpressionStatement","src":"7489:47:3"},{"nodeType":"YulAssignment","src":"7545:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7679:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7553:124:3"},"nodeType":"YulFunctionCall","src":"7553:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7545:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7423:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7438:4:3","type":""}],"src":"7272:419:3"},{"body":{"nodeType":"YulBlock","src":"7803:66:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7825:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"7833:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7821:3:3"},"nodeType":"YulFunctionCall","src":"7821:14:3"},{"hexValue":"5365656420616c72656164792067656e657261746564","kind":"string","nodeType":"YulLiteral","src":"7837:24:3","type":"","value":"Seed already generated"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7814:6:3"},"nodeType":"YulFunctionCall","src":"7814:48:3"},"nodeType":"YulExpressionStatement","src":"7814:48:3"}]},"name":"store_literal_in_memory_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7795:6:3","type":""}],"src":"7697:172:3"},{"body":{"nodeType":"YulBlock","src":"8021:220:3","statements":[{"nodeType":"YulAssignment","src":"8031:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8097:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"8102:2:3","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8038:58:3"},"nodeType":"YulFunctionCall","src":"8038:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"8031:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8203:3:3"}],"functionName":{"name":"store_literal_in_memory_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533","nodeType":"YulIdentifier","src":"8114:88:3"},"nodeType":"YulFunctionCall","src":"8114:93:3"},"nodeType":"YulExpressionStatement","src":"8114:93:3"},{"nodeType":"YulAssignment","src":"8216:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"8227:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"8232:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8223:3:3"},"nodeType":"YulFunctionCall","src":"8223:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"8216:3:3"}]}]},"name":"abi_encode_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8009:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8017:3:3","type":""}],"src":"7875:366:3"},{"body":{"nodeType":"YulBlock","src":"8418:248:3","statements":[{"nodeType":"YulAssignment","src":"8428:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8440:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8451:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8436:3:3"},"nodeType":"YulFunctionCall","src":"8436:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8428:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8475:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"8486:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8471:3:3"},"nodeType":"YulFunctionCall","src":"8471:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8494:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"8500:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8490:3:3"},"nodeType":"YulFunctionCall","src":"8490:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8464:6:3"},"nodeType":"YulFunctionCall","src":"8464:47:3"},"nodeType":"YulExpressionStatement","src":"8464:47:3"},{"nodeType":"YulAssignment","src":"8520:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8654:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8528:124:3"},"nodeType":"YulFunctionCall","src":"8528:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8520:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8398:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8413:4:3","type":""}],"src":"8247:419:3"},{"body":{"nodeType":"YulBlock","src":"8778:66:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"8800:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"8808:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8796:3:3"},"nodeType":"YulFunctionCall","src":"8796:14:3"},{"hexValue":"4472617720626c6f636b206e6f742072656163686564","kind":"string","nodeType":"YulLiteral","src":"8812:24:3","type":"","value":"Draw block not reached"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8789:6:3"},"nodeType":"YulFunctionCall","src":"8789:48:3"},"nodeType":"YulExpressionStatement","src":"8789:48:3"}]},"name":"store_literal_in_memory_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"8770:6:3","type":""}],"src":"8672:172:3"},{"body":{"nodeType":"YulBlock","src":"8996:220:3","statements":[{"nodeType":"YulAssignment","src":"9006:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9072:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"9077:2:3","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9013:58:3"},"nodeType":"YulFunctionCall","src":"9013:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9006:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9178:3:3"}],"functionName":{"name":"store_literal_in_memory_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3","nodeType":"YulIdentifier","src":"9089:88:3"},"nodeType":"YulFunctionCall","src":"9089:93:3"},"nodeType":"YulExpressionStatement","src":"9089:93:3"},{"nodeType":"YulAssignment","src":"9191:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9202:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"9207:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9198:3:3"},"nodeType":"YulFunctionCall","src":"9198:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"9191:3:3"}]}]},"name":"abi_encode_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"8984:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"8992:3:3","type":""}],"src":"8850:366:3"},{"body":{"nodeType":"YulBlock","src":"9393:248:3","statements":[{"nodeType":"YulAssignment","src":"9403:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9415:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9426:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9411:3:3"},"nodeType":"YulFunctionCall","src":"9411:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9403:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9450:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"9461:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9446:3:3"},"nodeType":"YulFunctionCall","src":"9446:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9469:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"9475:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9465:3:3"},"nodeType":"YulFunctionCall","src":"9465:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9439:6:3"},"nodeType":"YulFunctionCall","src":"9439:47:3"},"nodeType":"YulExpressionStatement","src":"9439:47:3"},{"nodeType":"YulAssignment","src":"9495:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"9629:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9503:124:3"},"nodeType":"YulFunctionCall","src":"9503:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9495:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9373:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9388:4:3","type":""}],"src":"9222:419:3"},{"body":{"nodeType":"YulBlock","src":"9753:67:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9775:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"9783:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9771:3:3"},"nodeType":"YulFunctionCall","src":"9771:14:3"},{"hexValue":"426c6f636b68617368206e6f7420617661696c61626c65","kind":"string","nodeType":"YulLiteral","src":"9787:25:3","type":"","value":"Blockhash not available"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9764:6:3"},"nodeType":"YulFunctionCall","src":"9764:49:3"},"nodeType":"YulExpressionStatement","src":"9764:49:3"}]},"name":"store_literal_in_memory_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9745:6:3","type":""}],"src":"9647:173:3"},{"body":{"nodeType":"YulBlock","src":"9972:220:3","statements":[{"nodeType":"YulAssignment","src":"9982:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10048:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"10053:2:3","type":"","value":"23"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"9989:58:3"},"nodeType":"YulFunctionCall","src":"9989:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"9982:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10154:3:3"}],"functionName":{"name":"store_literal_in_memory_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5","nodeType":"YulIdentifier","src":"10065:88:3"},"nodeType":"YulFunctionCall","src":"10065:93:3"},"nodeType":"YulExpressionStatement","src":"10065:93:3"},{"nodeType":"YulAssignment","src":"10167:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10178:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"10183:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10174:3:3"},"nodeType":"YulFunctionCall","src":"10174:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10167:3:3"}]}]},"name":"abi_encode_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9960:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"9968:3:3","type":""}],"src":"9826:366:3"},{"body":{"nodeType":"YulBlock","src":"10369:248:3","statements":[{"nodeType":"YulAssignment","src":"10379:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10391:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10402:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10387:3:3"},"nodeType":"YulFunctionCall","src":"10387:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10379:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10426:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"10437:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10422:3:3"},"nodeType":"YulFunctionCall","src":"10422:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10445:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"10451:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10441:3:3"},"nodeType":"YulFunctionCall","src":"10441:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10415:6:3"},"nodeType":"YulFunctionCall","src":"10415:47:3"},"nodeType":"YulExpressionStatement","src":"10415:47:3"},{"nodeType":"YulAssignment","src":"10471:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"10605:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10479:124:3"},"nodeType":"YulFunctionCall","src":"10479:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10471:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10349:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10364:4:3","type":""}],"src":"10198:419:3"},{"body":{"nodeType":"YulBlock","src":"10670:32:3","statements":[{"nodeType":"YulAssignment","src":"10680:16:3","value":{"name":"value","nodeType":"YulIdentifier","src":"10691:5:3"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"10680:7:3"}]}]},"name":"leftAlign_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10652:5:3","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"10662:7:3","type":""}],"src":"10623:79:3"},{"body":{"nodeType":"YulBlock","src":"10791:74:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10808:3:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10851:5:3"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"10833:17:3"},"nodeType":"YulFunctionCall","src":"10833:24:3"}],"functionName":{"name":"leftAlign_t_bytes32","nodeType":"YulIdentifier","src":"10813:19:3"},"nodeType":"YulFunctionCall","src":"10813:45:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10801:6:3"},"nodeType":"YulFunctionCall","src":"10801:58:3"},"nodeType":"YulExpressionStatement","src":"10801:58:3"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10779:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10786:3:3","type":""}],"src":"10708:157:3"},{"body":{"nodeType":"YulBlock","src":"10918:32:3","statements":[{"nodeType":"YulAssignment","src":"10928:16:3","value":{"name":"value","nodeType":"YulIdentifier","src":"10939:5:3"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"10928:7:3"}]}]},"name":"leftAlign_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10900:5:3","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"10910:7:3","type":""}],"src":"10871:79:3"},{"body":{"nodeType":"YulBlock","src":"11039:74:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11056:3:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11099:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11081:17:3"},"nodeType":"YulFunctionCall","src":"11081:24:3"}],"functionName":{"name":"leftAlign_t_uint256","nodeType":"YulIdentifier","src":"11061:19:3"},"nodeType":"YulFunctionCall","src":"11061:45:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11049:6:3"},"nodeType":"YulFunctionCall","src":"11049:58:3"},"nodeType":"YulExpressionStatement","src":"11049:58:3"}]},"name":"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11027:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11034:3:3","type":""}],"src":"10956:157:3"},{"body":{"nodeType":"YulBlock","src":"11263:253:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11336:6:3"},{"name":"pos","nodeType":"YulIdentifier","src":"11345:3:3"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"11274:61:3"},"nodeType":"YulFunctionCall","src":"11274:75:3"},"nodeType":"YulExpressionStatement","src":"11274:75:3"},{"nodeType":"YulAssignment","src":"11358:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11369:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"11374:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11365:3:3"},"nodeType":"YulFunctionCall","src":"11365:12:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11358:3:3"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"11449:6:3"},{"name":"pos","nodeType":"YulIdentifier","src":"11458:3:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"11387:61:3"},"nodeType":"YulFunctionCall","src":"11387:75:3"},"nodeType":"YulExpressionStatement","src":"11387:75:3"},{"nodeType":"YulAssignment","src":"11471:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11482:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"11487:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11478:3:3"},"nodeType":"YulFunctionCall","src":"11478:12:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11471:3:3"}]},{"nodeType":"YulAssignment","src":"11500:10:3","value":{"name":"pos","nodeType":"YulIdentifier","src":"11507:3:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11500:3:3"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_uint256__to_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11234:3:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11240:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11248:6:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11259:3:3","type":""}],"src":"11119:397:3"},{"body":{"nodeType":"YulBlock","src":"11620:124:3","statements":[{"nodeType":"YulAssignment","src":"11630:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11642:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11653:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11638:3:3"},"nodeType":"YulFunctionCall","src":"11638:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11630:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11710:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11723:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"11734:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11719:3:3"},"nodeType":"YulFunctionCall","src":"11719:17:3"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"11666:43:3"},"nodeType":"YulFunctionCall","src":"11666:71:3"},"nodeType":"YulExpressionStatement","src":"11666:71:3"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11592:9:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"11604:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11615:4:3","type":""}],"src":"11522:222:3"},{"body":{"nodeType":"YulBlock","src":"11856:63:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11878:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"11886:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11874:3:3"},"nodeType":"YulFunctionCall","src":"11874:14:3"},{"hexValue":"4472617720616c726561647920657869737473","kind":"string","nodeType":"YulLiteral","src":"11890:21:3","type":"","value":"Draw already exists"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11867:6:3"},"nodeType":"YulFunctionCall","src":"11867:45:3"},"nodeType":"YulExpressionStatement","src":"11867:45:3"}]},"name":"store_literal_in_memory_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11848:6:3","type":""}],"src":"11750:169:3"},{"body":{"nodeType":"YulBlock","src":"12071:220:3","statements":[{"nodeType":"YulAssignment","src":"12081:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12147:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"12152:2:3","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12088:58:3"},"nodeType":"YulFunctionCall","src":"12088:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12081:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12253:3:3"}],"functionName":{"name":"store_literal_in_memory_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990","nodeType":"YulIdentifier","src":"12164:88:3"},"nodeType":"YulFunctionCall","src":"12164:93:3"},"nodeType":"YulExpressionStatement","src":"12164:93:3"},{"nodeType":"YulAssignment","src":"12266:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12277:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"12282:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12273:3:3"},"nodeType":"YulFunctionCall","src":"12273:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12266:3:3"}]}]},"name":"abi_encode_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12059:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12067:3:3","type":""}],"src":"11925:366:3"},{"body":{"nodeType":"YulBlock","src":"12468:248:3","statements":[{"nodeType":"YulAssignment","src":"12478:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12490:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12501:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12486:3:3"},"nodeType":"YulFunctionCall","src":"12486:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12478:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12525:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"12536:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12521:3:3"},"nodeType":"YulFunctionCall","src":"12521:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12544:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"12550:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12540:3:3"},"nodeType":"YulFunctionCall","src":"12540:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12514:6:3"},"nodeType":"YulFunctionCall","src":"12514:47:3"},"nodeType":"YulExpressionStatement","src":"12514:47:3"},{"nodeType":"YulAssignment","src":"12570:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12704:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12578:124:3"},"nodeType":"YulFunctionCall","src":"12578:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12570:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12448:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12463:4:3","type":""}],"src":"12297:419:3"},{"body":{"nodeType":"YulBlock","src":"12828:76:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12850:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"12858:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12846:3:3"},"nodeType":"YulFunctionCall","src":"12846:14:3"},{"hexValue":"4472617720626c6f636b206d75737420626520696e2074686520667574757265","kind":"string","nodeType":"YulLiteral","src":"12862:34:3","type":"","value":"Draw block must be in the future"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12839:6:3"},"nodeType":"YulFunctionCall","src":"12839:58:3"},"nodeType":"YulExpressionStatement","src":"12839:58:3"}]},"name":"store_literal_in_memory_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12820:6:3","type":""}],"src":"12722:182:3"},{"body":{"nodeType":"YulBlock","src":"13056:220:3","statements":[{"nodeType":"YulAssignment","src":"13066:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13132:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"13137:2:3","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13073:58:3"},"nodeType":"YulFunctionCall","src":"13073:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13066:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13238:3:3"}],"functionName":{"name":"store_literal_in_memory_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92","nodeType":"YulIdentifier","src":"13149:88:3"},"nodeType":"YulFunctionCall","src":"13149:93:3"},"nodeType":"YulExpressionStatement","src":"13149:93:3"},{"nodeType":"YulAssignment","src":"13251:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13262:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"13267:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13258:3:3"},"nodeType":"YulFunctionCall","src":"13258:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13251:3:3"}]}]},"name":"abi_encode_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13044:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13052:3:3","type":""}],"src":"12910:366:3"},{"body":{"nodeType":"YulBlock","src":"13453:248:3","statements":[{"nodeType":"YulAssignment","src":"13463:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13475:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13486:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13471:3:3"},"nodeType":"YulFunctionCall","src":"13471:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13463:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13510:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13521:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13506:3:3"},"nodeType":"YulFunctionCall","src":"13506:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13529:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"13535:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13525:3:3"},"nodeType":"YulFunctionCall","src":"13525:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13499:6:3"},"nodeType":"YulFunctionCall","src":"13499:47:3"},"nodeType":"YulExpressionStatement","src":"13499:47:3"},{"nodeType":"YulAssignment","src":"13555:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13689:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13563:124:3"},"nodeType":"YulFunctionCall","src":"13563:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13555:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13433:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13448:4:3","type":""}],"src":"13282:419:3"},{"body":{"nodeType":"YulBlock","src":"13833:206:3","statements":[{"nodeType":"YulAssignment","src":"13843:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13855:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13866:2:3","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13851:3:3"},"nodeType":"YulFunctionCall","src":"13851:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13843:4:3"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13923:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13936:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"13947:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13932:3:3"},"nodeType":"YulFunctionCall","src":"13932:17:3"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"13879:43:3"},"nodeType":"YulFunctionCall","src":"13879:71:3"},"nodeType":"YulExpressionStatement","src":"13879:71:3"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"14004:6:3"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14017:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14028:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14013:3:3"},"nodeType":"YulFunctionCall","src":"14013:18:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"13960:43:3"},"nodeType":"YulFunctionCall","src":"13960:72:3"},"nodeType":"YulExpressionStatement","src":"13960:72:3"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13797:9:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13809:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13817:6:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13828:4:3","type":""}],"src":"13707:332:3"},{"body":{"nodeType":"YulBlock","src":"14151:66:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14173:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"14181:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14169:3:3"},"nodeType":"YulFunctionCall","src":"14169:14:3"},{"hexValue":"53656564206e6f742067656e65726174656420796574","kind":"string","nodeType":"YulLiteral","src":"14185:24:3","type":"","value":"Seed not generated yet"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14162:6:3"},"nodeType":"YulFunctionCall","src":"14162:48:3"},"nodeType":"YulExpressionStatement","src":"14162:48:3"}]},"name":"store_literal_in_memory_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14143:6:3","type":""}],"src":"14045:172:3"},{"body":{"nodeType":"YulBlock","src":"14369:220:3","statements":[{"nodeType":"YulAssignment","src":"14379:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14445:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"14450:2:3","type":"","value":"22"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14386:58:3"},"nodeType":"YulFunctionCall","src":"14386:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14379:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14551:3:3"}],"functionName":{"name":"store_literal_in_memory_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a","nodeType":"YulIdentifier","src":"14462:88:3"},"nodeType":"YulFunctionCall","src":"14462:93:3"},"nodeType":"YulExpressionStatement","src":"14462:93:3"},{"nodeType":"YulAssignment","src":"14564:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14575:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"14580:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14571:3:3"},"nodeType":"YulFunctionCall","src":"14571:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14564:3:3"}]}]},"name":"abi_encode_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14357:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14365:3:3","type":""}],"src":"14223:366:3"},{"body":{"nodeType":"YulBlock","src":"14766:248:3","statements":[{"nodeType":"YulAssignment","src":"14776:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14788:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14799:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14784:3:3"},"nodeType":"YulFunctionCall","src":"14784:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14776:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14823:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"14834:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14819:3:3"},"nodeType":"YulFunctionCall","src":"14819:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14842:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"14848:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14838:3:3"},"nodeType":"YulFunctionCall","src":"14838:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14812:6:3"},"nodeType":"YulFunctionCall","src":"14812:47:3"},"nodeType":"YulExpressionStatement","src":"14812:47:3"},{"nodeType":"YulAssignment","src":"14868:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15002:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14876:124:3"},"nodeType":"YulFunctionCall","src":"14876:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14868:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14746:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14761:4:3","type":""}],"src":"14595:419:3"},{"body":{"nodeType":"YulBlock","src":"15126:59:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15148:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"15156:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15144:3:3"},"nodeType":"YulFunctionCall","src":"15144:14:3"},{"hexValue":"4e6f207061727469636970616e7473","kind":"string","nodeType":"YulLiteral","src":"15160:17:3","type":"","value":"No participants"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15137:6:3"},"nodeType":"YulFunctionCall","src":"15137:41:3"},"nodeType":"YulExpressionStatement","src":"15137:41:3"}]},"name":"store_literal_in_memory_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15118:6:3","type":""}],"src":"15020:165:3"},{"body":{"nodeType":"YulBlock","src":"15337:220:3","statements":[{"nodeType":"YulAssignment","src":"15347:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15413:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"15418:2:3","type":"","value":"15"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15354:58:3"},"nodeType":"YulFunctionCall","src":"15354:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15347:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15519:3:3"}],"functionName":{"name":"store_literal_in_memory_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f","nodeType":"YulIdentifier","src":"15430:88:3"},"nodeType":"YulFunctionCall","src":"15430:93:3"},"nodeType":"YulExpressionStatement","src":"15430:93:3"},{"nodeType":"YulAssignment","src":"15532:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15543:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"15548:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15539:3:3"},"nodeType":"YulFunctionCall","src":"15539:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15532:3:3"}]}]},"name":"abi_encode_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15325:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15333:3:3","type":""}],"src":"15191:366:3"},{"body":{"nodeType":"YulBlock","src":"15734:248:3","statements":[{"nodeType":"YulAssignment","src":"15744:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15756:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15767:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15752:3:3"},"nodeType":"YulFunctionCall","src":"15752:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15744:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15791:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"15802:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15787:3:3"},"nodeType":"YulFunctionCall","src":"15787:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15810:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"15816:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15806:3:3"},"nodeType":"YulFunctionCall","src":"15806:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15780:6:3"},"nodeType":"YulFunctionCall","src":"15780:47:3"},"nodeType":"YulExpressionStatement","src":"15780:47:3"},{"nodeType":"YulAssignment","src":"15836:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15970:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15844:124:3"},"nodeType":"YulFunctionCall","src":"15844:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15836:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15714:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15729:4:3","type":""}],"src":"15563:419:3"},{"body":{"nodeType":"YulBlock","src":"16016:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16033:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16036:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16026:6:3"},"nodeType":"YulFunctionCall","src":"16026:88:3"},"nodeType":"YulExpressionStatement","src":"16026:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16130:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"16133:4:3","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16123:6:3"},"nodeType":"YulFunctionCall","src":"16123:15:3"},"nodeType":"YulExpressionStatement","src":"16123:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"16154:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"16157:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"16147:6:3"},"nodeType":"YulFunctionCall","src":"16147:15:3"},"nodeType":"YulExpressionStatement","src":"16147:15:3"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"15988:180:3"},{"body":{"nodeType":"YulBlock","src":"16208:142:3","statements":[{"nodeType":"YulAssignment","src":"16218:25:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16241:1:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16223:17:3"},"nodeType":"YulFunctionCall","src":"16223:20:3"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"16218:1:3"}]},{"nodeType":"YulAssignment","src":"16252:25:3","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16275:1:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"16257:17:3"},"nodeType":"YulFunctionCall","src":"16257:20:3"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"16252:1:3"}]},{"body":{"nodeType":"YulBlock","src":"16299:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"16301:16:3"},"nodeType":"YulFunctionCall","src":"16301:18:3"},"nodeType":"YulExpressionStatement","src":"16301:18:3"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"16296:1:3"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16289:6:3"},"nodeType":"YulFunctionCall","src":"16289:9:3"},"nodeType":"YulIf","src":"16286:35:3"},{"nodeType":"YulAssignment","src":"16330:14:3","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"16339:1:3"},{"name":"y","nodeType":"YulIdentifier","src":"16342:1:3"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"16335:3:3"},"nodeType":"YulFunctionCall","src":"16335:9:3"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"16330:1:3"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"16197:1:3","type":""},{"name":"y","nodeType":"YulTypedName","src":"16200:1:3","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"16206:1:3","type":""}],"src":"16174:176:3"},{"body":{"nodeType":"YulBlock","src":"16462:62:3","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"16484:6:3"},{"kind":"number","nodeType":"YulLiteral","src":"16492:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16480:3:3"},"nodeType":"YulFunctionCall","src":"16480:14:3"},{"hexValue":"53656564206e6f742067656e657261746564","kind":"string","nodeType":"YulLiteral","src":"16496:20:3","type":"","value":"Seed not generated"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16473:6:3"},"nodeType":"YulFunctionCall","src":"16473:44:3"},"nodeType":"YulExpressionStatement","src":"16473:44:3"}]},"name":"store_literal_in_memory_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"16454:6:3","type":""}],"src":"16356:168:3"},{"body":{"nodeType":"YulBlock","src":"16676:220:3","statements":[{"nodeType":"YulAssignment","src":"16686:74:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16752:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"16757:2:3","type":"","value":"18"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"16693:58:3"},"nodeType":"YulFunctionCall","src":"16693:67:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16686:3:3"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16858:3:3"}],"functionName":{"name":"store_literal_in_memory_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f","nodeType":"YulIdentifier","src":"16769:88:3"},"nodeType":"YulFunctionCall","src":"16769:93:3"},"nodeType":"YulExpressionStatement","src":"16769:93:3"},{"nodeType":"YulAssignment","src":"16871:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16882:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"16887:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16878:3:3"},"nodeType":"YulFunctionCall","src":"16878:12:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16871:3:3"}]}]},"name":"abi_encode_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16664:3:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16672:3:3","type":""}],"src":"16530:366:3"},{"body":{"nodeType":"YulBlock","src":"17073:248:3","statements":[{"nodeType":"YulAssignment","src":"17083:26:3","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17095:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"17106:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17091:3:3"},"nodeType":"YulFunctionCall","src":"17091:18:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17083:4:3"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17130:9:3"},{"kind":"number","nodeType":"YulLiteral","src":"17141:1:3","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17126:3:3"},"nodeType":"YulFunctionCall","src":"17126:17:3"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17149:4:3"},{"name":"headStart","nodeType":"YulIdentifier","src":"17155:9:3"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17145:3:3"},"nodeType":"YulFunctionCall","src":"17145:20:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17119:6:3"},"nodeType":"YulFunctionCall","src":"17119:47:3"},"nodeType":"YulExpressionStatement","src":"17119:47:3"},{"nodeType":"YulAssignment","src":"17175:139:3","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17309:4:3"}],"functionName":{"name":"abi_encode_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17183:124:3"},"nodeType":"YulFunctionCall","src":"17183:131:3"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17175:4:3"}]}]},"name":"abi_encode_tuple_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17053:9:3","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17068:4:3","type":""}],"src":"16902:419:3"},{"body":{"nodeType":"YulBlock","src":"17369:52:3","statements":[{"nodeType":"YulAssignment","src":"17379:35:3","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"17404:2:3","type":"","value":"96"},{"name":"value","nodeType":"YulIdentifier","src":"17408:5:3"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"17400:3:3"},"nodeType":"YulFunctionCall","src":"17400:14:3"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"17379:8:3"}]}]},"name":"shift_left_96","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17350:5:3","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"17360:8:3","type":""}],"src":"17327:94:3"},{"body":{"nodeType":"YulBlock","src":"17474:47:3","statements":[{"nodeType":"YulAssignment","src":"17484:31:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17509:5:3"}],"functionName":{"name":"shift_left_96","nodeType":"YulIdentifier","src":"17495:13:3"},"nodeType":"YulFunctionCall","src":"17495:20:3"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"17484:7:3"}]}]},"name":"leftAlign_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17456:5:3","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"17466:7:3","type":""}],"src":"17427:94:3"},{"body":{"nodeType":"YulBlock","src":"17574:53:3","statements":[{"nodeType":"YulAssignment","src":"17584:37:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17615:5:3"}],"functionName":{"name":"leftAlign_t_uint160","nodeType":"YulIdentifier","src":"17595:19:3"},"nodeType":"YulFunctionCall","src":"17595:26:3"},"variableNames":[{"name":"aligned","nodeType":"YulIdentifier","src":"17584:7:3"}]}]},"name":"leftAlign_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17556:5:3","type":""}],"returnVariables":[{"name":"aligned","nodeType":"YulTypedName","src":"17566:7:3","type":""}],"src":"17527:100:3"},{"body":{"nodeType":"YulBlock","src":"17716:74:3","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17733:3:3"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"17776:5:3"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"17758:17:3"},"nodeType":"YulFunctionCall","src":"17758:24:3"}],"functionName":{"name":"leftAlign_t_address","nodeType":"YulIdentifier","src":"17738:19:3"},"nodeType":"YulFunctionCall","src":"17738:45:3"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17726:6:3"},"nodeType":"YulFunctionCall","src":"17726:58:3"},"nodeType":"YulExpressionStatement","src":"17726:58:3"}]},"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"17704:5:3","type":""},{"name":"pos","nodeType":"YulTypedName","src":"17711:3:3","type":""}],"src":"17633:157:3"},{"body":{"nodeType":"YulBlock","src":"17940:253:3","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18013:6:3"},{"name":"pos","nodeType":"YulIdentifier","src":"18022:3:3"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"17951:61:3"},"nodeType":"YulFunctionCall","src":"17951:75:3"},"nodeType":"YulExpressionStatement","src":"17951:75:3"},{"nodeType":"YulAssignment","src":"18035:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18046:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"18051:2:3","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18042:3:3"},"nodeType":"YulFunctionCall","src":"18042:12:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18035:3:3"}]},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18126:6:3"},{"name":"pos","nodeType":"YulIdentifier","src":"18135:3:3"}],"functionName":{"name":"abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"18064:61:3"},"nodeType":"YulFunctionCall","src":"18064:75:3"},"nodeType":"YulExpressionStatement","src":"18064:75:3"},{"nodeType":"YulAssignment","src":"18148:19:3","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18159:3:3"},{"kind":"number","nodeType":"YulLiteral","src":"18164:2:3","type":"","value":"20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18155:3:3"},"nodeType":"YulFunctionCall","src":"18155:12:3"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18148:3:3"}]},{"nodeType":"YulAssignment","src":"18177:10:3","value":{"name":"pos","nodeType":"YulIdentifier","src":"18184:3:3"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18177:3:3"}]}]},"name":"abi_encode_tuple_packed_t_uint256_t_address__to_t_uint256_t_address__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17911:3:3","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17917:6:3","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17925:6:3","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17936:3:3","type":""}],"src":"17796:397:3"},{"body":{"nodeType":"YulBlock","src":"18227:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18244:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18247:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18237:6:3"},"nodeType":"YulFunctionCall","src":"18237:88:3"},"nodeType":"YulExpressionStatement","src":"18237:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18341:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18344:4:3","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18334:6:3"},"nodeType":"YulFunctionCall","src":"18334:15:3"},"nodeType":"YulExpressionStatement","src":"18334:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18365:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18368:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18358:6:3"},"nodeType":"YulFunctionCall","src":"18358:15:3"},"nodeType":"YulExpressionStatement","src":"18358:15:3"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18199:180:3"},{"body":{"nodeType":"YulBlock","src":"18413:152:3","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18430:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18433:77:3","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18423:6:3"},"nodeType":"YulFunctionCall","src":"18423:88:3"},"nodeType":"YulExpressionStatement","src":"18423:88:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18527:1:3","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18530:4:3","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18520:6:3"},"nodeType":"YulFunctionCall","src":"18520:15:3"},"nodeType":"YulExpressionStatement","src":"18520:15:3"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18551:1:3","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18554:4:3","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18544:6:3"},"nodeType":"YulFunctionCall","src":"18544:15:3"},"nodeType":"YulExpressionStatement","src":"18544:15:3"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"18385:180:3"},{"body":{"nodeType":"YulBlock","src":"18614:190:3","statements":[{"nodeType":"YulAssignment","src":"18624:33:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18651:5:3"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"18633:17:3"},"nodeType":"YulFunctionCall","src":"18633:24:3"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"18624:5:3"}]},{"body":{"nodeType":"YulBlock","src":"18747:22:3","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"18749:16:3"},"nodeType":"YulFunctionCall","src":"18749:18:3"},"nodeType":"YulExpressionStatement","src":"18749:18:3"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18672:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"18679:66:3","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"18669:2:3"},"nodeType":"YulFunctionCall","src":"18669:77:3"},"nodeType":"YulIf","src":"18666:103:3"},{"nodeType":"YulAssignment","src":"18778:20:3","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"18789:5:3"},{"kind":"number","nodeType":"YulLiteral","src":"18796:1:3","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18785:3:3"},"nodeType":"YulFunctionCall","src":"18785:13:3"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18778:3:3"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18600:5:3","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18610:3:3","type":""}],"src":"18571:233:3"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256_t_bytes32_t_bool__to_t_bytes32_t_uint256_t_bytes32_t_bool__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bool_to_t_bool_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_bytes32t_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes32[]\n    function abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x20)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_addresst_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_array$_t_bytes32_$dyn_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e(memPtr) {\n\n        mstore(add(memPtr, 0), \"Draw does not exist\")\n\n    }\n\n    function abi_encode_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9b644f96fdc1dc65ac01b2abc928791959caa20e0a2638f01b1d53bbbec3701e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533(memPtr) {\n\n        mstore(add(memPtr, 0), \"Seed already generated\")\n\n    }\n\n    function abi_encode_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1622570952d8ca74361b66ff250fbad7c7970eb3b34bbe1d25a6086c04121533_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3(memPtr) {\n\n        mstore(add(memPtr, 0), \"Draw block not reached\")\n\n    }\n\n    function abi_encode_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c501ce7930ee30128b566d41922733adf5f3c7cd621dcfe5c822bc48c2f5fed3_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5(memPtr) {\n\n        mstore(add(memPtr, 0), \"Blockhash not available\")\n\n    }\n\n    function abi_encode_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 23)\n        store_literal_in_memory_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_da128c7f55a46ee5c98961bd34e383605d27d63c36a6618d6891b33a0fe66ac5_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function leftAlign_t_bytes32(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_bytes32(cleanup_t_bytes32(value)))\n    }\n\n    function leftAlign_t_uint256(value) -> aligned {\n        aligned := value\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_uint256(cleanup_t_uint256(value)))\n    }\n\n    function abi_encode_tuple_packed_t_bytes32_t_uint256__to_t_bytes32_t_uint256__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_bytes32_to_t_bytes32_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 32)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function store_literal_in_memory_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990(memPtr) {\n\n        mstore(add(memPtr, 0), \"Draw already exists\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a42ce4429154757a19fb2ff4b57965af3eb44fe97795fecd472fc58b8cd6990_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92(memPtr) {\n\n        mstore(add(memPtr, 0), \"Draw block must be in the future\")\n\n    }\n\n    function abi_encode_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_31dd48d989c0960aaa1452e8e975e213f6e9455e86f71c731158dcc6117b0a92_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function store_literal_in_memory_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a(memPtr) {\n\n        mstore(add(memPtr, 0), \"Seed not generated yet\")\n\n    }\n\n    function abi_encode_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 22)\n        store_literal_in_memory_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4405522f5d41400bc2e45b417772b9db1088020dd8bfaf8d27c60368bc4dfa6a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f(memPtr) {\n\n        mstore(add(memPtr, 0), \"No participants\")\n\n    }\n\n    function abi_encode_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 15)\n        store_literal_in_memory_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6c2f79a44715c61f2cf75bf9cbae3228e6e5625f9e20c93ed2ea1947444a713f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function store_literal_in_memory_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f(memPtr) {\n\n        mstore(add(memPtr, 0), \"Seed not generated\")\n\n    }\n\n    function abi_encode_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 18)\n        store_literal_in_memory_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a553750810999db29645e8e695aa69ce059a791a8bf76ef6dd28dcfc55df4c6f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function shift_left_96(value) -> newValue {\n        newValue :=\n\n        shl(96, value)\n\n    }\n\n    function leftAlign_t_uint160(value) -> aligned {\n        aligned := shift_left_96(value)\n    }\n\n    function leftAlign_t_address(value) -> aligned {\n        aligned := leftAlign_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value, pos) {\n        mstore(pos, leftAlign_t_address(cleanup_t_address(value)))\n    }\n\n    function abi_encode_tuple_packed_t_uint256_t_address__to_t_uint256_t_address__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        abi_encode_t_uint256_to_t_uint256_nonPadded_inplace_fromStack(value0,  pos)\n        pos := add(pos, 32)\n\n        abi_encode_t_address_to_t_address_nonPadded_inplace_fromStack(value1,  pos)\n        pos := add(pos, 20)\n\n        end := pos\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n}\n","id":3,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCC36C36 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x424611C3 EQ PUSH2 0x8F JUMPI DUP1 PUSH4 0xA5AFD138 EQ PUSH2 0xAB JUMPI DUP1 PUSH4 0xE26024C2 EQ PUSH2 0xC7 JUMPI DUP1 PUSH4 0xF53F4ED6 EQ PUSH2 0xF7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x72D JUMP JUMPDEST PUSH2 0x127 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x86 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x79D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xA9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xA4 SWAP2 SWAP1 PUSH2 0x72D JUMP JUMPDEST PUSH2 0x164 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC5 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xC0 SWAP2 SWAP1 PUSH2 0x80E JUMP JUMPDEST PUSH2 0x339 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xDC SWAP2 SWAP1 PUSH2 0x861 JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x111 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x10C SWAP2 SWAP1 PUSH2 0x97F JUMP JUMPDEST PUSH2 0x555 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x11E SWAP2 SWAP1 PUSH2 0xA19 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x20 MSTORE DUP1 PUSH1 0x0 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD SLOAD SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 DUP1 PUSH1 0x2 ADD SLOAD SWAP1 DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 PUSH1 0x0 ADD SLOAD SUB PUSH2 0x1C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1BA SWAP1 PUSH2 0xA91 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x215 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x20C SWAP1 PUSH2 0xAFD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD NUMBER GT PUSH2 0x25B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x252 SWAP1 PUSH2 0xB69 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x1 ADD SLOAD BLOCKHASH SWAP1 POP PUSH1 0x0 DUP1 SHL DUP2 SUB PUSH2 0x2AA JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2A1 SWAP1 PUSH2 0xBD5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP4 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2BD SWAP3 SWAP2 SWAP1 PUSH2 0xC37 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 DUP3 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x1 DUP3 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP3 PUSH32 0x307583FD274BD2F891397898B2525EA924E4708E61F545FF6E399E5420F34AA9 DUP4 PUSH1 0x2 ADD SLOAD PUSH1 0x40 MLOAD PUSH2 0x32C SWAP2 SWAP1 PUSH2 0xC63 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SHL PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 ADD SLOAD EQ PUSH2 0x393 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x38A SWAP1 PUSH2 0xCCA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST NUMBER DUP2 GT PUSH2 0x3D5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3CC SWAP1 PUSH2 0xD36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 SHL DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 ISZERO ISZERO DUP2 MSTORE POP PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 ADD MLOAD DUP2 PUSH1 0x0 ADD SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD DUP2 PUSH1 0x3 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP SWAP1 POP POP DUP3 PUSH32 0x597C657522CDC182A5B033C23DB479E0102722A452F096523B3091C3ECE3F1F DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x481 SWAP3 SWAP2 SWAP1 PUSH2 0xD56 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4F6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4ED SWAP1 PUSH2 0xDCB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 GT PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x530 SWAP1 PUSH2 0xE37 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP2 PUSH1 0x2 ADD SLOAD PUSH1 0x0 SHR PUSH2 0x54C SWAP2 SWAP1 PUSH2 0xE86 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP1 PUSH1 0x3 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH2 0x5BD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5B4 SWAP1 PUSH2 0xF03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP7 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x5D2 SWAP3 SWAP2 SWAP1 PUSH2 0xF6B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH1 0x0 PUSH2 0x5FC DUP7 DUP7 DUP6 PUSH1 0x0 ADD SLOAD DUP6 PUSH2 0x63A JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 0x60F JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0x630 JUMP JUMPDEST PUSH1 0x0 DUP10 DUP5 PUSH1 0x2 ADD SLOAD PUSH1 0x0 SHR PUSH2 0x624 SWAP2 SWAP1 PUSH2 0xE86 JUMP JUMPDEST SWAP1 POP DUP1 DUP10 EQ SWAP5 POP POP POP POP POP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x648 DUP7 DUP7 DUP6 PUSH2 0x653 JUMP JUMPDEST EQ SWAP1 POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x0 JUMPDEST DUP6 DUP6 SWAP1 POP DUP2 LT ISZERO PUSH2 0x69F JUMPI PUSH2 0x68A DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x67E JUMPI PUSH2 0x67D PUSH2 0xF97 JUMP JUMPDEST JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x6AB JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 0x697 SWAP1 PUSH2 0xFF5 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x65C JUMP JUMPDEST POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x6C3 JUMPI PUSH2 0x6BE DUP3 DUP5 PUSH2 0x6D6 JUMP JUMPDEST PUSH2 0x6CE JUMP JUMPDEST PUSH2 0x6CD DUP4 DUP4 PUSH2 0x6D6 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x0 MSTORE DUP2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x70A DUP2 PUSH2 0x6F7 JUMP JUMPDEST DUP2 EQ PUSH2 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x727 DUP2 PUSH2 0x701 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x743 JUMPI PUSH2 0x742 PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x751 DUP5 DUP3 DUP6 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x76D DUP2 PUSH2 0x75A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x77C DUP2 PUSH2 0x6F7 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x797 DUP2 PUSH2 0x782 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x7B2 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x764 JUMP JUMPDEST PUSH2 0x7BF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x773 JUMP JUMPDEST PUSH2 0x7CC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x764 JUMP JUMPDEST PUSH2 0x7D9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x78E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7EB DUP2 PUSH2 0x75A JUMP JUMPDEST DUP2 EQ PUSH2 0x7F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x808 DUP2 PUSH2 0x7E2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x827 JUMPI PUSH2 0x826 PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x835 DUP7 DUP3 DUP8 ADD PUSH2 0x718 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x846 DUP7 DUP3 DUP8 ADD PUSH2 0x7F9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x857 DUP7 DUP3 DUP8 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x878 JUMPI PUSH2 0x877 PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x886 DUP6 DUP3 DUP7 ADD PUSH2 0x718 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x897 DUP6 DUP3 DUP7 ADD PUSH2 0x718 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x8B6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x773 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E7 DUP3 PUSH2 0x8BC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8F7 DUP2 PUSH2 0x8DC JUMP JUMPDEST DUP2 EQ PUSH2 0x902 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x914 DUP2 PUSH2 0x8EE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x93F JUMPI PUSH2 0x93E PUSH2 0x91A JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x95C JUMPI PUSH2 0x95B PUSH2 0x91F JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x978 JUMPI PUSH2 0x977 PUSH2 0x924 JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x99C JUMPI PUSH2 0x99B PUSH2 0x6ED JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x9AA DUP10 DUP3 DUP11 ADD PUSH2 0x718 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x9BB DUP10 DUP3 DUP11 ADD PUSH2 0x718 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x9CC DUP10 DUP3 DUP11 ADD PUSH2 0x718 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x9DD DUP10 DUP3 DUP11 ADD PUSH2 0x905 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x9FE JUMPI PUSH2 0x9FD PUSH2 0x6F2 JUMP JUMPDEST JUMPDEST PUSH2 0xA0A DUP10 DUP3 DUP11 ADD PUSH2 0x929 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xA2E PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x78E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4472617720646F6573206E6F7420657869737400000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA7B PUSH1 0x13 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xA86 DUP3 PUSH2 0xA45 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xAAA DUP2 PUSH2 0xA6E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x5365656420616C72656164792067656E65726174656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAE7 PUSH1 0x16 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xAF2 DUP3 PUSH2 0xAB1 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB16 DUP2 PUSH2 0xADA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4472617720626C6F636B206E6F74207265616368656400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB53 PUSH1 0x16 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xB5E DUP3 PUSH2 0xB1D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xB82 DUP2 PUSH2 0xB46 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x426C6F636B68617368206E6F7420617661696C61626C65000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBBF PUSH1 0x17 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xBCA DUP3 PUSH2 0xB89 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xBEE DUP2 PUSH2 0xBB2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC10 PUSH2 0xC0B DUP3 PUSH2 0x75A JUMP JUMPDEST PUSH2 0xBF5 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC31 PUSH2 0xC2C DUP3 PUSH2 0x6F7 JUMP JUMPDEST PUSH2 0xC16 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC43 DUP3 DUP6 PUSH2 0xBFF JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0xC53 DUP3 DUP5 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xC78 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x764 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4472617720616C72656164792065786973747300000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCB4 PUSH1 0x13 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xCBF DUP3 PUSH2 0xC7E JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xCE3 DUP2 PUSH2 0xCA7 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4472617720626C6F636B206D75737420626520696E2074686520667574757265 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD20 PUSH1 0x20 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xD2B DUP3 PUSH2 0xCEA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xD4F DUP2 PUSH2 0xD13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xD6B PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x764 JUMP JUMPDEST PUSH2 0xD78 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x773 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x53656564206E6F742067656E6572617465642079657400000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDB5 PUSH1 0x16 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xDC0 DUP3 PUSH2 0xD7F JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xDE4 DUP2 PUSH2 0xDA8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E6F207061727469636970616E74730000000000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE21 PUSH1 0xF DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xE2C DUP3 PUSH2 0xDEB JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xE50 DUP2 PUSH2 0xE14 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE91 DUP3 PUSH2 0x6F7 JUMP JUMPDEST SWAP2 POP PUSH2 0xE9C DUP4 PUSH2 0x6F7 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0xEAC JUMPI PUSH2 0xEAB PUSH2 0xE57 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x53656564206E6F742067656E6572617465640000000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEED PUSH1 0x12 DUP4 PUSH2 0xA34 JUMP JUMPDEST SWAP2 POP PUSH2 0xEF8 DUP3 PUSH2 0xEB7 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0xF1C DUP2 PUSH2 0xEE0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x60 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF3B DUP3 PUSH2 0xF23 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF4D DUP3 PUSH2 0xF30 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF65 PUSH2 0xF60 DUP3 PUSH2 0x8DC JUMP JUMPDEST PUSH2 0xF42 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF77 DUP3 DUP6 PUSH2 0xC20 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP2 POP PUSH2 0xF87 DUP3 DUP5 PUSH2 0xF54 JUMP JUMPDEST PUSH1 0x14 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1000 DUP3 PUSH2 0x6F7 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1032 JUMPI PUSH2 0x1031 PUSH2 0xFC6 JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 POP 0xC4 SLOAD MLOAD PUSH22 0xF650D538D19BA18BE116E8D512AEBC9982D107C5BAAA MSTORE8 MSIZE BASEFEE 0xF8 JUMPDEST PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"133:2828:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;310:37;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;;;;;1177:569;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;595:509;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1793:331;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2217:741;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;310:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1177:569::-;1235:17;1255:5;:13;1261:6;1255:13;;;;;;;;;;;1235:33;;1306:1;1287:20;;:4;:15;;;:20;1279:52;;;;;;;;;;;;:::i;:::-;;;;;;;;;1351:4;:18;;;;;;;;;;;;1350:19;1342:54;;;;;;;;;;;;:::i;:::-;;;;;;;;;1430:4;:20;;;1415:12;:35;1407:70;;;;;;;;;;;;:::i;:::-;;;;;;;;;1490:10;1513:4;:20;;;1503:31;1490:44;;1559:1;1553:7;;:2;:7;1545:43;;;;;;;;;;;;:::i;:::-;;;;;;;;;1640:2;1644:6;1623:28;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1613:39;;;;;;1601:4;:9;;:51;;;;1684:4;1663;:18;;;:25;;;;;;;;;;;;;;;;;;1720:6;1706:32;1728:4;:9;;;1706:32;;;;;;:::i;:::-;;;;;;;;1224:522;;1177:569;:::o;595:509::-;732:1;704:29;;:5;:13;710:6;704:13;;;;;;;;;;;:24;;;:29;696:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;794:12;776:15;:30;768:75;;;;;;;;;;;;:::i;:::-;;;;;;;;;872:158;;;;;;;;904:10;872:158;;;;946:15;872:158;;;;982:1;872:158;;;;;;1013:5;872:158;;;;;856:5;:13;862:6;856:13;;;;;;;;;;;:174;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1060:6;1048:48;1068:10;1080:15;1048:48;;;;;;;:::i;:::-;;;;;;;;595:509;;;:::o;1793:331::-;1881:7;1901:17;1921:5;:13;1927:6;1921:13;;;;;;;;;;;1901:33;;1953:4;:18;;;;;;;;;;;;1945:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;2037:1;2017:17;:21;2009:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;2099:17;2086:4;:9;;;2078:18;;:38;;;;:::i;:::-;2071:45;;;1793:331;;;;:::o;2217:741::-;2416:4;2433:17;2453:5;:13;2459:6;2453:13;;;;;;;;;;;2433:33;;2485:4;:18;;;;;;;;;;;;2477:49;;;;;;;;;;;;:::i;:::-;;;;;;;;;2570:12;2612:9;2623:4;2595:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2585:44;;;;;;2570:59;;2674:15;2692:56;2719:5;;2726:4;:15;;;2743:4;2692:26;:56::i;:::-;2674:74;;2764:10;2759:29;;2783:5;2776:12;;;;;;;2759:29;2846:19;2889:17;2876:4;:9;;;2868:18;;:38;;;;:::i;:::-;2846:60;;2938:11;2925:9;:24;2917:33;;;;;;2217:741;;;;;;;;;:::o;4637:172:1:-;4738:4;4798;4761:33;4782:5;;4789:4;4761:20;:33::i;:::-;:41;4754:48;;4637:172;;;;;;:::o;5212:318::-;5305:7;5324:20;5347:4;5324:27;;5366:9;5361:134;5385:5;;:12;;5381:1;:16;5361:134;;;5433:51;5461:12;5475:5;;5481:1;5475:8;;;;;;;:::i;:::-;;;;;;;;5433:27;:51::i;:::-;5418:66;;5399:3;;;;;:::i;:::-;;;;5361:134;;;;5511:12;5504:19;;;5212:318;;;;;:::o;504:167:0:-;579:7;609:1;605;:5;:59;;640:24;659:1;662;640:18;:24::i;:::-;605:59;;;613:24;632:1;635;613:18;:24::i;:::-;605:59;598:66;;504:167;;;;:::o;791:239::-;864:13;941:1;935:4;928:15;969:1;963:4;956:15;1009:4;1003;993:21;984:30;;791:239;;;;:::o;88:117:3:-;197:1;194;187:12;211:117;320:1;317;310:12;334:77;371:7;400:5;389:16;;334:77;;;:::o;417:122::-;490:24;508:5;490:24;:::i;:::-;483:5;480:35;470:63;;529:1;526;519:12;470:63;417:122;:::o;545:139::-;591:5;629:6;616:20;607:29;;645:33;672:5;645:33;:::i;:::-;545:139;;;;:::o;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;;:::i;:::-;766:119;924:1;949:53;994:7;985:6;974:9;970:22;949:53;:::i;:::-;939:63;;895:117;690:329;;;;:::o;1025:77::-;1062:7;1091:5;1080:16;;1025:77;;;:::o;1108:118::-;1195:24;1213:5;1195:24;:::i;:::-;1190:3;1183:37;1108:118;;:::o;1232:::-;1319:24;1337:5;1319:24;:::i;:::-;1314:3;1307:37;1232:118;;:::o;1356:90::-;1390:7;1433:5;1426:13;1419:21;1408:32;;1356:90;;;:::o;1452:109::-;1533:21;1548:5;1533:21;:::i;:::-;1528:3;1521:34;1452:109;;:::o;1567:541::-;1738:4;1776:3;1765:9;1761:19;1753:27;;1790:71;1858:1;1847:9;1843:17;1834:6;1790:71;:::i;:::-;1871:72;1939:2;1928:9;1924:18;1915:6;1871:72;:::i;:::-;1953;2021:2;2010:9;2006:18;1997:6;1953:72;:::i;:::-;2035:66;2097:2;2086:9;2082:18;2073:6;2035:66;:::i;:::-;1567:541;;;;;;;:::o;2114:122::-;2187:24;2205:5;2187:24;:::i;:::-;2180:5;2177:35;2167:63;;2226:1;2223;2216:12;2167:63;2114:122;:::o;2242:139::-;2288:5;2326:6;2313:20;2304:29;;2342:33;2369:5;2342:33;:::i;:::-;2242:139;;;;:::o;2387:619::-;2464:6;2472;2480;2529:2;2517:9;2508:7;2504:23;2500:32;2497:119;;;2535:79;;:::i;:::-;2497:119;2655:1;2680:53;2725:7;2716:6;2705:9;2701:22;2680:53;:::i;:::-;2670:63;;2626:117;2782:2;2808:53;2853:7;2844:6;2833:9;2829:22;2808:53;:::i;:::-;2798:63;;2753:118;2910:2;2936:53;2981:7;2972:6;2961:9;2957:22;2936:53;:::i;:::-;2926:63;;2881:118;2387:619;;;;;:::o;3012:474::-;3080:6;3088;3137:2;3125:9;3116:7;3112:23;3108:32;3105:119;;;3143:79;;:::i;:::-;3105:119;3263:1;3288:53;3333:7;3324:6;3313:9;3309:22;3288:53;:::i;:::-;3278:63;;3234:117;3390:2;3416:53;3461:7;3452:6;3441:9;3437:22;3416:53;:::i;:::-;3406:63;;3361:118;3012:474;;;;;:::o;3492:222::-;3585:4;3623:2;3612:9;3608:18;3600:26;;3636:71;3704:1;3693:9;3689:17;3680:6;3636:71;:::i;:::-;3492:222;;;;:::o;3720:126::-;3757:7;3797:42;3790:5;3786:54;3775:65;;3720:126;;;:::o;3852:96::-;3889:7;3918:24;3936:5;3918:24;:::i;:::-;3907:35;;3852:96;;;:::o;3954:122::-;4027:24;4045:5;4027:24;:::i;:::-;4020:5;4017:35;4007:63;;4066:1;4063;4056:12;4007:63;3954:122;:::o;4082:139::-;4128:5;4166:6;4153:20;4144:29;;4182:33;4209:5;4182:33;:::i;:::-;4082:139;;;;:::o;4227:117::-;4336:1;4333;4326:12;4350:117;4459:1;4456;4449:12;4473:117;4582:1;4579;4572:12;4613:568;4686:8;4696:6;4746:3;4739:4;4731:6;4727:17;4723:27;4713:122;;4754:79;;:::i;:::-;4713:122;4867:6;4854:20;4844:30;;4897:18;4889:6;4886:30;4883:117;;;4919:79;;:::i;:::-;4883:117;5033:4;5025:6;5021:17;5009:29;;5087:3;5079:4;5071:6;5067:17;5057:8;5053:32;5050:41;5047:128;;;5094:79;;:::i;:::-;5047:128;4613:568;;;;;:::o;5187:1141::-;5309:6;5317;5325;5333;5341;5349;5398:3;5386:9;5377:7;5373:23;5369:33;5366:120;;;5405:79;;:::i;:::-;5366:120;5525:1;5550:53;5595:7;5586:6;5575:9;5571:22;5550:53;:::i;:::-;5540:63;;5496:117;5652:2;5678:53;5723:7;5714:6;5703:9;5699:22;5678:53;:::i;:::-;5668:63;;5623:118;5780:2;5806:53;5851:7;5842:6;5831:9;5827:22;5806:53;:::i;:::-;5796:63;;5751:118;5908:2;5934:53;5979:7;5970:6;5959:9;5955:22;5934:53;:::i;:::-;5924:63;;5879:118;6064:3;6053:9;6049:19;6036:33;6096:18;6088:6;6085:30;6082:117;;;6118:79;;:::i;:::-;6082:117;6231:80;6303:7;6294:6;6283:9;6279:22;6231:80;:::i;:::-;6213:98;;;;6007:314;5187:1141;;;;;;;;:::o;6334:210::-;6421:4;6459:2;6448:9;6444:18;6436:26;;6472:65;6534:1;6523:9;6519:17;6510:6;6472:65;:::i;:::-;6334:210;;;;:::o;6550:169::-;6634:11;6668:6;6663:3;6656:19;6708:4;6703:3;6699:14;6684:29;;6550:169;;;;:::o;6725:::-;6865:21;6861:1;6853:6;6849:14;6842:45;6725:169;:::o;6900:366::-;7042:3;7063:67;7127:2;7122:3;7063:67;:::i;:::-;7056:74;;7139:93;7228:3;7139:93;:::i;:::-;7257:2;7252:3;7248:12;7241:19;;6900:366;;;:::o;7272:419::-;7438:4;7476:2;7465:9;7461:18;7453:26;;7525:9;7519:4;7515:20;7511:1;7500:9;7496:17;7489:47;7553:131;7679:4;7553:131;:::i;:::-;7545:139;;7272:419;;;:::o;7697:172::-;7837:24;7833:1;7825:6;7821:14;7814:48;7697:172;:::o;7875:366::-;8017:3;8038:67;8102:2;8097:3;8038:67;:::i;:::-;8031:74;;8114:93;8203:3;8114:93;:::i;:::-;8232:2;8227:3;8223:12;8216:19;;7875:366;;;:::o;8247:419::-;8413:4;8451:2;8440:9;8436:18;8428:26;;8500:9;8494:4;8490:20;8486:1;8475:9;8471:17;8464:47;8528:131;8654:4;8528:131;:::i;:::-;8520:139;;8247:419;;;:::o;8672:172::-;8812:24;8808:1;8800:6;8796:14;8789:48;8672:172;:::o;8850:366::-;8992:3;9013:67;9077:2;9072:3;9013:67;:::i;:::-;9006:74;;9089:93;9178:3;9089:93;:::i;:::-;9207:2;9202:3;9198:12;9191:19;;8850:366;;;:::o;9222:419::-;9388:4;9426:2;9415:9;9411:18;9403:26;;9475:9;9469:4;9465:20;9461:1;9450:9;9446:17;9439:47;9503:131;9629:4;9503:131;:::i;:::-;9495:139;;9222:419;;;:::o;9647:173::-;9787:25;9783:1;9775:6;9771:14;9764:49;9647:173;:::o;9826:366::-;9968:3;9989:67;10053:2;10048:3;9989:67;:::i;:::-;9982:74;;10065:93;10154:3;10065:93;:::i;:::-;10183:2;10178:3;10174:12;10167:19;;9826:366;;;:::o;10198:419::-;10364:4;10402:2;10391:9;10387:18;10379:26;;10451:9;10445:4;10441:20;10437:1;10426:9;10422:17;10415:47;10479:131;10605:4;10479:131;:::i;:::-;10471:139;;10198:419;;;:::o;10623:79::-;10662:7;10691:5;10680:16;;10623:79;;;:::o;10708:157::-;10813:45;10833:24;10851:5;10833:24;:::i;:::-;10813:45;:::i;:::-;10808:3;10801:58;10708:157;;:::o;10871:79::-;10910:7;10939:5;10928:16;;10871:79;;;:::o;10956:157::-;11061:45;11081:24;11099:5;11081:24;:::i;:::-;11061:45;:::i;:::-;11056:3;11049:58;10956:157;;:::o;11119:397::-;11259:3;11274:75;11345:3;11336:6;11274:75;:::i;:::-;11374:2;11369:3;11365:12;11358:19;;11387:75;11458:3;11449:6;11387:75;:::i;:::-;11487:2;11482:3;11478:12;11471:19;;11507:3;11500:10;;11119:397;;;;;:::o;11522:222::-;11615:4;11653:2;11642:9;11638:18;11630:26;;11666:71;11734:1;11723:9;11719:17;11710:6;11666:71;:::i;:::-;11522:222;;;;:::o;11750:169::-;11890:21;11886:1;11878:6;11874:14;11867:45;11750:169;:::o;11925:366::-;12067:3;12088:67;12152:2;12147:3;12088:67;:::i;:::-;12081:74;;12164:93;12253:3;12164:93;:::i;:::-;12282:2;12277:3;12273:12;12266:19;;11925:366;;;:::o;12297:419::-;12463:4;12501:2;12490:9;12486:18;12478:26;;12550:9;12544:4;12540:20;12536:1;12525:9;12521:17;12514:47;12578:131;12704:4;12578:131;:::i;:::-;12570:139;;12297:419;;;:::o;12722:182::-;12862:34;12858:1;12850:6;12846:14;12839:58;12722:182;:::o;12910:366::-;13052:3;13073:67;13137:2;13132:3;13073:67;:::i;:::-;13066:74;;13149:93;13238:3;13149:93;:::i;:::-;13267:2;13262:3;13258:12;13251:19;;12910:366;;;:::o;13282:419::-;13448:4;13486:2;13475:9;13471:18;13463:26;;13535:9;13529:4;13525:20;13521:1;13510:9;13506:17;13499:47;13563:131;13689:4;13563:131;:::i;:::-;13555:139;;13282:419;;;:::o;13707:332::-;13828:4;13866:2;13855:9;13851:18;13843:26;;13879:71;13947:1;13936:9;13932:17;13923:6;13879:71;:::i;:::-;13960:72;14028:2;14017:9;14013:18;14004:6;13960:72;:::i;:::-;13707:332;;;;;:::o;14045:172::-;14185:24;14181:1;14173:6;14169:14;14162:48;14045:172;:::o;14223:366::-;14365:3;14386:67;14450:2;14445:3;14386:67;:::i;:::-;14379:74;;14462:93;14551:3;14462:93;:::i;:::-;14580:2;14575:3;14571:12;14564:19;;14223:366;;;:::o;14595:419::-;14761:4;14799:2;14788:9;14784:18;14776:26;;14848:9;14842:4;14838:20;14834:1;14823:9;14819:17;14812:47;14876:131;15002:4;14876:131;:::i;:::-;14868:139;;14595:419;;;:::o;15020:165::-;15160:17;15156:1;15148:6;15144:14;15137:41;15020:165;:::o;15191:366::-;15333:3;15354:67;15418:2;15413:3;15354:67;:::i;:::-;15347:74;;15430:93;15519:3;15430:93;:::i;:::-;15548:2;15543:3;15539:12;15532:19;;15191:366;;;:::o;15563:419::-;15729:4;15767:2;15756:9;15752:18;15744:26;;15816:9;15810:4;15806:20;15802:1;15791:9;15787:17;15780:47;15844:131;15970:4;15844:131;:::i;:::-;15836:139;;15563:419;;;:::o;15988:180::-;16036:77;16033:1;16026:88;16133:4;16130:1;16123:15;16157:4;16154:1;16147:15;16174:176;16206:1;16223:20;16241:1;16223:20;:::i;:::-;16218:25;;16257:20;16275:1;16257:20;:::i;:::-;16252:25;;16296:1;16286:35;;16301:18;;:::i;:::-;16286:35;16342:1;16339;16335:9;16330:14;;16174:176;;;;:::o;16356:168::-;16496:20;16492:1;16484:6;16480:14;16473:44;16356:168;:::o;16530:366::-;16672:3;16693:67;16757:2;16752:3;16693:67;:::i;:::-;16686:74;;16769:93;16858:3;16769:93;:::i;:::-;16887:2;16882:3;16878:12;16871:19;;16530:366;;;:::o;16902:419::-;17068:4;17106:2;17095:9;17091:18;17083:26;;17155:9;17149:4;17145:20;17141:1;17130:9;17126:17;17119:47;17183:131;17309:4;17183:131;:::i;:::-;17175:139;;16902:419;;;:::o;17327:94::-;17360:8;17408:5;17404:2;17400:14;17379:35;;17327:94;;;:::o;17427:::-;17466:7;17495:20;17509:5;17495:20;:::i;:::-;17484:31;;17427:94;;;:::o;17527:100::-;17566:7;17595:26;17615:5;17595:26;:::i;:::-;17584:37;;17527:100;;;:::o;17633:157::-;17738:45;17758:24;17776:5;17758:24;:::i;:::-;17738:45;:::i;:::-;17733:3;17726:58;17633:157;;:::o;17796:397::-;17936:3;17951:75;18022:3;18013:6;17951:75;:::i;:::-;18051:2;18046:3;18042:12;18035:19;;18064:75;18135:3;18126:6;18064:75;:::i;:::-;18164:2;18159:3;18155:12;18148:19;;18184:3;18177:10;;17796:397;;;;;:::o;18199:180::-;18247:77;18244:1;18237:88;18344:4;18341:1;18334:15;18368:4;18365:1;18358:15;18385:180;18433:77;18430:1;18423:88;18530:4;18527:1;18520:15;18554:4;18551:1;18544:15;18571:233;18610:3;18633:24;18651:5;18633:24;:::i;:::-;18624:33;;18679:66;18672:5;18669:77;18666:103;;18749:18;;:::i;:::-;18666:103;18796:1;18789:5;18785:13;18778:20;;18571:233;;;:::o"},"methodIdentifiers":{"createDraw(uint256,bytes32,uint256)":"a5afd138","draws(uint256)":"0cc36c36","generateSeed(uint256)":"424611c3","getWinnerIndex(uint256,uint256)":"e26024c2","verifyWinner(uint256,uint256,uint256,address,bytes32[])":"f53f4ed6"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"drawBlockNumber\",\"type\":\"uint256\"}],\"name\":\"DrawCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"}],\"name\":\"SeedGenerated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"drawBlockNumber\",\"type\":\"uint256\"}],\"name\":\"createDraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"draws\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"drawBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"seed\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"seedGenerated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"}],\"name\":\"generateSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"}],\"name\":\"getWinnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"drawId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalParticipants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWinner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDraw(uint256,bytes32,uint256)\":{\"notice\":\"Create a new draw with its Merkle root and future block number\"},\"generateSeed(uint256)\":{\"notice\":\"Generate the seed from the predefined blockhash\"},\"getWinnerIndex(uint256,uint256)\":{\"notice\":\"Get the winning index\"},\"verifyWinner(uint256,uint256,uint256,address,bytes32[])\":{\"notice\":\"Verify if an address is the winner using its index and Merkle proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MerkleDrawManager/MerkleDrawManager.sol\":\"MerkleDrawManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"keccak256\":\"0x8cbd338f083224b4b6f0ff42cbda641a0a6c31ffcdca197452b97fe4d0918269\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f517dec5ba0c6491395acbf7f1d621f4e89e8f218bf5303c867b1c5ad70c6b11\",\"dweb:/ipfs/QmWmXHRLEw8W6ckth7NyYTU88YfvuS7xSsfae5ksL8qNUe\"]},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f91ba472de411aa557cdbf6560c40750d87bd11c9060bc04d2ba7119af9d5a6\",\"dweb:/ipfs/QmQjtYo2i7dDvzCEzZ67bDoNSG4RrwMoxPWuqFmX5Xzpuw\"]},\"contracts/MerkleDrawManager/MerkleDrawManager.sol\":{\"keccak256\":\"0xd6436669e6da8fa32e483614a92b614b225eed8bdc719b4ce8bd200cf86d2a0d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c61331a8e551a305e19d248755493643323c0325abd04abd6b0ec5ec74e82ec1\",\"dweb:/ipfs/Qmcefatfrnvtbba5giU3Jm7Dg8VuWryfyA5FXRAm6848qG\"]}},\"version\":1}","storageLayout":{"storage":[{"astId":1129,"contract":"contracts/MerkleDrawManager/MerkleDrawManager.sol:MerkleDrawManager","label":"draws","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_struct(Draw)1124_storage)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_uint256,t_struct(Draw)1124_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct MerkleDrawManager.Draw)","numberOfBytes":"32","value":"t_struct(Draw)1124_storage"},"t_struct(Draw)1124_storage":{"encoding":"inplace","label":"struct MerkleDrawManager.Draw","members":[{"astId":1117,"contract":"contracts/MerkleDrawManager/MerkleDrawManager.sol:MerkleDrawManager","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1119,"contract":"contracts/MerkleDrawManager/MerkleDrawManager.sol:MerkleDrawManager","label":"drawBlockNumber","offset":0,"slot":"1","type":"t_uint256"},{"astId":1121,"contract":"contracts/MerkleDrawManager/MerkleDrawManager.sol:MerkleDrawManager","label":"seed","offset":0,"slot":"2","type":"t_bytes32"},{"astId":1123,"contract":"contracts/MerkleDrawManager/MerkleDrawManager.sol:MerkleDrawManager","label":"seedGenerated","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}}}}}